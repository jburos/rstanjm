/*
    This file is part of rstanarm.
    Copyright (C) 2015, 2016 Trustees of Columbia University
    
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.10

#include <stan/model/model_header.hpp>

namespace model_jm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic,1>
make_theta_L(const int& len_theta_L,
                 const std::vector<std::vector<int> >& p,
                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
            (void) theta_L;  // dummy to suppress unused var warning
            int zeta_mark(0);
            (void) zeta_mark;  // dummy to suppress unused var warning
            int rho_mark(0);
            (void) rho_mark;  // dummy to suppress unused var warning
            int z_T_mark(0);
            (void) z_T_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(theta_L, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 54;
            stan::math::assign(zeta_mark, 1);
            current_statement_begin__ = 55;
            stan::math::assign(rho_mark, 1);
            current_statement_begin__ = 56;
            stan::math::assign(z_T_mark, 1);
            current_statement_begin__ = 57;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 60;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 62;
                    stan::math::assign(nc, sum(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p")));
                    current_statement_begin__ = 63;
                    if (as_bool(logical_eq(nc,1))) {
                        current_statement_begin__ = 64;
                        stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), (get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1)));
                        current_statement_begin__ = 66;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                            (void) T_i;  // dummy to suppress unused var warning
                            fun_scalar_t__ trace_T_i;
                            (void) trace_T_i;  // dummy to suppress unused var warning
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  pi(static_cast<Eigen::VectorXd::Index>(nc));
                            (void) pi;  // dummy to suppress unused var warning
                            fun_scalar_t__ std_dev;
                            (void) std_dev;  // dummy to suppress unused var warning
                            fun_scalar_t__ T21;
                            (void) T21;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(trace_T_i, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(pi, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(std_dev, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(T21, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 75;
                            stan::math::assign(trace_T_i, (square((get_base1(tau,i,"tau",1) * get_base1(scale,i,"scale",1))) * nc));
                            current_statement_begin__ = 77;
                            stan::math::assign(pi, segment(zeta,zeta_mark,nc));
                            current_statement_begin__ = 78;
                            stan::math::assign(pi, divide(pi,sum(pi)));
                            current_statement_begin__ = 79;
                            stan::math::assign(zeta_mark, (zeta_mark + nc));
                            current_statement_begin__ = 80;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,1,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 81;
                            stan::math::assign(get_base1_lhs(T_i,1,1,"T_i",1), std_dev);
                            current_statement_begin__ = 84;
                            stan::math::assign(std_dev, sqrt((get_base1(pi,2,"pi",1) * trace_T_i)));
                            current_statement_begin__ = 85;
                            stan::math::assign(T21, ((2.0 * get_base1(rho,rho_mark,"rho",1)) - 1.0));
                            current_statement_begin__ = 86;
                            stan::math::assign(rho_mark, (rho_mark + 1));
                            current_statement_begin__ = 87;
                            stan::math::assign(get_base1_lhs(T_i,2,2,"T_i",1), (std_dev * sqrt((1.0 - square(T21)))));
                            current_statement_begin__ = 88;
                            stan::math::assign(get_base1_lhs(T_i,2,1,"T_i",1), (std_dev * T21));
                            current_statement_begin__ = 90;
                            for (int r = 2; r <= (nc - 1); ++r) {
                                {
                                    int rp1(0);
                                    (void) rp1;  // dummy to suppress unused var warning
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  T_row(static_cast<Eigen::VectorXd::Index>(r));
                                    (void) T_row;  // dummy to suppress unused var warning
                                    fun_scalar_t__ scale_factor;
                                    (void) scale_factor;  // dummy to suppress unused var warning
                                    stan::math::initialize(T_row, std::numeric_limits<double>::quiet_NaN());
                                    stan::math::initialize(scale_factor, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 94;
                                    stan::math::assign(T_row, segment(z_T,z_T_mark,r));
                                    current_statement_begin__ = 95;
                                    stan::math::assign(z_T_mark, (z_T_mark + r));
                                    current_statement_begin__ = 96;
                                    stan::math::assign(rp1, (r + 1));
                                    current_statement_begin__ = 97;
                                    stan::math::assign(std_dev, sqrt((get_base1(pi,rp1,"pi",1) * trace_T_i)));
                                    current_statement_begin__ = 98;
                                    stan::math::assign(scale_factor, (sqrt((get_base1(rho,rho_mark,"rho",1) / dot_self(T_row))) * std_dev));
                                    current_statement_begin__ = 99;
                                    for (int c = 1; c <= r; ++c) {
                                        current_statement_begin__ = 99;
                                        stan::math::assign(get_base1_lhs(T_i,rp1,c,"T_i",1), (get_base1(T_row,c,"T_row",1) * scale_factor));
                                    }
                                    current_statement_begin__ = 100;
                                    stan::math::assign(get_base1_lhs(T_i,rp1,rp1,"T_i",1), (sqrt((1.0 - get_base1(rho,rho_mark,"rho",1))) * std_dev));
                                    current_statement_begin__ = 101;
                                    stan::math::assign(rho_mark, (rho_mark + 1));
                                }
                            }
                            current_statement_begin__ = 105;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 105;
                                for (int r = c; r <= nc; ++r) {
                                    current_statement_begin__ = 106;
                                    stan::math::assign(get_base1_lhs(theta_L,theta_L_mark,"theta_L",1), get_base1(T_i,r,c,"T_i",1));
                                    current_statement_begin__ = 107;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 111;
            return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic,1>
    operator()(const int& len_theta_L,
                 const std::vector<std::vector<int> >& p,
                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& tau,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& scale,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& zeta,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& rho,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, tau, scale, zeta, rho, z_T, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<std::vector<int> >& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(rows(z_b)));
            (void) b;  // dummy to suppress unused var warning
            int b_mark(0);
            (void) b_mark;  // dummy to suppress unused var warning
            int theta_L_mark(0);
            (void) theta_L_mark;  // dummy to suppress unused var warning
            stan::math::initialize(b, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 134;
            stan::math::assign(b_mark, 1);
            current_statement_begin__ = 135;
            stan::math::assign(theta_L_mark, 1);
            current_statement_begin__ = 136;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int nc(0);
                    (void) nc;  // dummy to suppress unused var warning
                    current_statement_begin__ = 138;
                    stan::math::assign(nc, sum(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p")));
                    current_statement_begin__ = 139;
                    if (as_bool(logical_eq(nc,1))) {
                        {
                            fun_scalar_t__ theta_L_start;
                            (void) theta_L_start;  // dummy to suppress unused var warning
                            stan::math::initialize(theta_L_start, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 141;
                            stan::math::assign(theta_L_start, get_base1(theta_L,theta_L_mark,"theta_L",1));
                            current_statement_begin__ = 142;
                            for (int s = b_mark; s <= ((b_mark + get_base1(l,i,"l",1)) - 1); ++s) {
                                current_statement_begin__ = 143;
                                stan::math::assign(get_base1_lhs(b,s,"b",1), (theta_L_start * get_base1(z_b,s,"z_b",1)));
                            }
                            current_statement_begin__ = 144;
                            stan::math::assign(b_mark, (b_mark + get_base1(l,i,"l",1)));
                            current_statement_begin__ = 145;
                            stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                        }
                    } else {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  T_i(static_cast<Eigen::VectorXd::Index>(nc),static_cast<Eigen::VectorXd::Index>(nc));
                            (void) T_i;  // dummy to suppress unused var warning
                            stan::math::initialize(T_i, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 149;
                            stan::math::assign(T_i, rep_matrix(0,nc,nc));
                            current_statement_begin__ = 150;
                            for (int c = 1; c <= nc; ++c) {
                                current_statement_begin__ = 151;
                                stan::math::assign(get_base1_lhs(T_i,c,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                current_statement_begin__ = 152;
                                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                current_statement_begin__ = 153;
                                for (int r = (c + 1); r <= nc; ++r) {
                                    current_statement_begin__ = 154;
                                    stan::math::assign(get_base1_lhs(T_i,r,c,"T_i",1), get_base1(theta_L,theta_L_mark,"theta_L",1));
                                    current_statement_begin__ = 155;
                                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                                }
                            }
                            current_statement_begin__ = 158;
                            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                                {
                                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(nc));
                                    (void) temp;  // dummy to suppress unused var warning
                                    stan::math::initialize(temp, std::numeric_limits<double>::quiet_NaN());
                                    current_statement_begin__ = 160;
                                    stan::math::assign(temp, multiply(T_i,segment(z_b,b_mark,nc)));
                                    current_statement_begin__ = 161;
                                    stan::math::assign(b_mark, (b_mark - 1));
                                    current_statement_begin__ = 162;
                                    for (int s = 1; s <= nc; ++s) {
                                        current_statement_begin__ = 162;
                                        stan::math::assign(get_base1_lhs(b,(b_mark + s),"b",1), get_base1(temp,s,"temp",1));
                                    }
                                    current_statement_begin__ = 163;
                                    stan::math::assign(b_mark, ((b_mark + nc) + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 167;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct make_b_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic,1>& theta_L,
           const std::vector<std::vector<int> >& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
reorder_b(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& b,
              const std::vector<std::vector<int> >& p,
              const std::vector<std::vector<int> >& q,
              const std::vector<int>& l,
              const int& M, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b_new(static_cast<Eigen::VectorXd::Index>(sum(to_array_1d(q))));
            (void) b_new;  // dummy to suppress unused var warning
            int nq_mark(0);
            (void) nq_mark;  // dummy to suppress unused var warning
            stan::math::initialize(b_new, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 195;
            stan::math::assign(nq_mark, 1);
            current_statement_begin__ = 196;
            for (int i = 1; i <= size(p); ++i) {
                {
                    int np(0);
                    (void) np;  // dummy to suppress unused var warning
                    int nq(0);
                    (void) nq;  // dummy to suppress unused var warning
                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  b_i(static_cast<Eigen::VectorXd::Index>(sum(stan::model::rvalue(q, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q"))));
                    (void) b_i;  // dummy to suppress unused var warning
                    stan::math::initialize(b_i, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 200;
                    stan::math::assign(np, sum(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p")));
                    current_statement_begin__ = 201;
                    stan::math::assign(nq, sum(stan::model::rvalue(q, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "q")));
                    current_statement_begin__ = 202;
                    stan::math::assign(b_i, segment(b,nq_mark,nq));
                    current_statement_begin__ = 203;
                    stan::math::assign(nq_mark, (nq_mark + nq));
                    current_statement_begin__ = 204;
                    for (int m = 1; m <= M; ++m) {
                        {
                            int shift_collect(0);
                            (void) shift_collect;  // dummy to suppress unused var warning
                            int shift_store(0);
                            (void) shift_store;  // dummy to suppress unused var warning
                            int start_collect(0);
                            (void) start_collect;  // dummy to suppress unused var warning
                            int start_store(0);
                            (void) start_store;  // dummy to suppress unused var warning
                            int end_store(0);
                            (void) end_store;  // dummy to suppress unused var warning
                            current_statement_begin__ = 210;
                            if (as_bool(logical_eq(m,1))) {
                                current_statement_begin__ = 210;
                                stan::math::assign(shift_collect, 0);
                            } else {
                                current_statement_begin__ = 211;
                                stan::math::assign(shift_collect, sum(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list())), "p")));
                            }
                            current_statement_begin__ = 212;
                            if (as_bool(logical_eq(m,1))) {
                                current_statement_begin__ = 212;
                                stan::math::assign(shift_store, 0);
                            } else {
                                current_statement_begin__ = 213;
                                stan::math::assign(shift_store, sum(stan::model::rvalue(q, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list())), "q")));
                            }
                            current_statement_begin__ = 214;
                            for (int j = 1; j <= get_base1(l,i,"l",1); ++j) {
                                current_statement_begin__ = 215;
                                stan::math::assign(start_collect, ((((j - 1) * get_base1(get_base1(p,i,"p",1),m,"p",2)) + shift_collect) + 1));
                                current_statement_begin__ = 216;
                                stan::math::assign(start_store, ((((j - 1) * get_base1(get_base1(p,i,"p",1),m,"p",2)) + shift_store) + 1));
                                current_statement_begin__ = 217;
                                stan::math::assign(end_store, ((((j - 1) * get_base1(get_base1(p,i,"p",1),m,"p",2)) + shift_store) + get_base1(get_base1(p,i,"p",1),m,"p",2)));
                                current_statement_begin__ = 218;
                                stan::model::assign(b_new, 
                                            stan::model::cons_list(stan::model::index_min_max(start_store, end_store), stan::model::nil_index_list()), 
                                            segment(b_i,start_collect,get_base1(get_base1(p,i,"p",1),m,"p",2)), 
                                            "assigning variable b_new");
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 222;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b_new);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct reorder_b_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& b,
              const std::vector<std::vector<int> >& p,
              const std::vector<std::vector<int> >& q,
              const std::vector<int>& l,
              const int& M, std::ostream* pstream__) const {
        return reorder_b(b, p, q, l, M, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
inline
void
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<std::vector<int> >& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int pos_reg(0);
            (void) pos_reg;  // dummy to suppress unused var warning
            int pos_rho(0);
            (void) pos_rho;  // dummy to suppress unused var warning
            current_statement_begin__ = 251;
            lp_accum__.add(normal_log<propto__>(z_b, 0, 1));
            current_statement_begin__ = 252;
            lp_accum__.add(normal_log<propto__>(z_T, 0, 1));
            current_statement_begin__ = 253;
            stan::math::assign(pos_reg, 1);
            current_statement_begin__ = 254;
            stan::math::assign(pos_rho, 1);
            current_statement_begin__ = 255;
            for (int i = 1; i <= t; ++i) {
                {
                    int p_tmp(0);
                    (void) p_tmp;  // dummy to suppress unused var warning
                    current_statement_begin__ = 257;
                    stan::math::assign(p_tmp, sum(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p")));
                    current_statement_begin__ = 258;
                    if (as_bool(logical_gt(p_tmp,1))) {
                        {
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape1(static_cast<Eigen::VectorXd::Index>((p_tmp - 1)));
                            (void) shape1;  // dummy to suppress unused var warning
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  shape2(static_cast<Eigen::VectorXd::Index>((p_tmp - 1)));
                            (void) shape2;  // dummy to suppress unused var warning
                            fun_scalar_t__ nu;
                            (void) nu;  // dummy to suppress unused var warning
                            stan::math::initialize(shape1, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(shape2, std::numeric_limits<double>::quiet_NaN());
                            stan::math::initialize(nu, std::numeric_limits<double>::quiet_NaN());
                            current_statement_begin__ = 262;
                            stan::math::assign(nu, (get_base1(regularization,pos_reg,"regularization",1) + (0.5 * (p_tmp - 2))));
                            current_statement_begin__ = 263;
                            stan::math::assign(pos_reg, (pos_reg + 1));
                            current_statement_begin__ = 264;
                            stan::math::assign(get_base1_lhs(shape1,1,"shape1",1), nu);
                            current_statement_begin__ = 265;
                            stan::math::assign(get_base1_lhs(shape2,1,"shape2",1), nu);
                            current_statement_begin__ = 266;
                            for (int j = 2; j <= (p_tmp - 1); ++j) {
                                current_statement_begin__ = 267;
                                stan::math::assign(nu, (nu - 0.5));
                                current_statement_begin__ = 268;
                                stan::math::assign(get_base1_lhs(shape1,j,"shape1",1), (0.5 * j));
                                current_statement_begin__ = 269;
                                stan::math::assign(get_base1_lhs(shape2,j,"shape2",1), nu);
                            }
                            current_statement_begin__ = 271;
                            lp_accum__.add(beta_log<propto__>(stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(pos_rho, ((pos_rho + p_tmp) - 2)), stan::model::nil_index_list()), "rho"), shape1, shape2));
                            current_statement_begin__ = 272;
                            stan::math::assign(pos_rho, ((pos_rho + p_tmp) - 1));
                        }
                    }
                }
            }
            current_statement_begin__ = 275;
            lp_accum__.add(gamma_log<propto__>(zeta, delta, 1));
            current_statement_begin__ = 276;
            lp_accum__.add(gamma_log<propto__>(tau, shape, 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
    inline
    void
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic,1>& shape,
             const int& t,
             const std::vector<std::vector<int> >& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
sqrt_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  out(static_cast<Eigen::VectorXd::Index>(rows(y)));
            (void) out;  // dummy to suppress unused var warning
            stan::math::initialize(out, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 287;
            for (int i = 1; i <= rows(y); ++i) {
                current_statement_begin__ = 287;
                stan::math::assign(get_base1_lhs(out,i,"out",1), sqrt(get_base1(out,i,"out",1)));
            }
            current_statement_begin__ = 288;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sqrt_vec_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return sqrt_vec(y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hs_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(rows(z_beta)));
            (void) lambda;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 302;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 303;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 303;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 304;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(z_beta,lambda),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hs_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
             const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hs_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
hsplus_prior(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(rows(z_beta)));
            (void) lambda;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  lambda_plus(static_cast<Eigen::VectorXd::Index>(rows(z_beta)));
            (void) lambda_plus;  // dummy to suppress unused var warning
            int K(0);
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(lambda_plus, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 319;
            stan::math::assign(K, rows(z_beta));
            current_statement_begin__ = 320;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 321;
                stan::math::assign(get_base1_lhs(lambda,k,"lambda",1), (get_base1(get_base1(local,1,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,2,"local",1),k,"local",2))));
                current_statement_begin__ = 322;
                stan::math::assign(get_base1_lhs(lambda_plus,k,"lambda_plus",1), (get_base1(get_base1(local,3,"local",1),k,"local",2) * sqrt(get_base1(get_base1(local,4,"local",1),k,"local",2))));
            }
            current_statement_begin__ = 324;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(multiply(elt_multiply(elt_multiply(z_beta,lambda),lambda_plus),get_base1(global,1,"global",1)),sqrt(get_base1(global,2,"global",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct hsplus_prior_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& z_beta,
                 const std::vector<T1__>& global,
                 const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic,1> >& local, std::ostream* pstream__) const {
        return hsplus_prior(z_beta, global, local, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
divide_real_by_vector(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ret(static_cast<Eigen::VectorXd::Index>(rows(y)));
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 336;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 336;
                stan::math::assign(get_base1_lhs(ret,n,"ret",1), (x / get_base1(y,n,"y",1)));
            }
            current_statement_begin__ = 337;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct divide_real_by_vector_functor__ {
    template <typename T0__, typename T1__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const T0__& x,
                          const Eigen::Matrix<T1__, Eigen::Dynamic,1>& y, std::ostream* pstream__) const {
        return divide_real_by_vector(x, y, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 349;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
            current_statement_begin__ = 349;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 349;
        current_statement_begin__ = 350;
        if (as_bool(logical_lt(link,3))) {
            current_statement_begin__ = 351;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(eta)));
                (void) mu;  // dummy to suppress unused var warning
                stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 354;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 354;
                    stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv(get_base1(eta,n,"eta",1)));
                }
                current_statement_begin__ = 355;
                return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gauss_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gauss(eta, link, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 367;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
            current_statement_begin__ = 367;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 367;
        current_statement_begin__ = 368;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 368;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 369;
            return stan::math::promote_scalar<fun_return_scalar_t__>(exp(eta));
        } else {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(eta)));
                (void) mu;  // dummy to suppress unused var warning
                stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 372;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 372;
                    stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv(get_base1(eta,n,"eta",1)));
                }
                current_statement_begin__ = 373;
                return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_gamma_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                  const int& link, std::ostream* pstream__) const {
        return linkinv_gamma(eta, link, pstream__);
    }
};

template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
linkinv_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 385;
        if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,4))))) {
            current_statement_begin__ = 385;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 385;
        current_statement_begin__ = 386;
        if (as_bool(logical_eq(link,1))) {
            current_statement_begin__ = 386;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(link,2))) {
            current_statement_begin__ = 387;
            return stan::math::promote_scalar<fun_return_scalar_t__>(exp(eta));
        } else {
            {
                Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(eta)));
                (void) mu;  // dummy to suppress unused var warning
                stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 390;
                if (as_bool(logical_eq(link,3))) {
                    current_statement_begin__ = 390;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 390;
                        stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv(get_base1(eta,n,"eta",1)));
                    }
                } else {
                    current_statement_begin__ = 391;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 391;
                        stan::math::assign(get_base1_lhs(mu,n,"mu",1), inv_sqrt(get_base1(eta,n,"eta",1)));
                    }
                }
                current_statement_begin__ = 392;
                return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct linkinv_inv_gaussian_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& eta,
                         const int& link, std::ostream* pstream__) const {
        return linkinv_inv_gaussian(eta, link, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gauss(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(eta)));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 405;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 405;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 405;
            current_statement_begin__ = 406;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 407;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 407;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), lognormal_log(get_base1(y,n,"y",1),get_base1(eta,n,"eta",1),sigma));
                }
            } else {
                {
                    Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(eta)));
                    (void) mu;  // dummy to suppress unused var warning
                    stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
                    current_statement_begin__ = 410;
                    stan::math::assign(mu, linkinv_gauss(eta,link, pstream__));
                    current_statement_begin__ = 411;
                    for (int n = 1; n <= rows(eta); ++n) {
                        current_statement_begin__ = 411;
                        stan::math::assign(get_base1_lhs(ll,n,"ll",1), normal_log(get_base1(y,n,"y",1),get_base1(mu,n,"mu",1),sigma));
                    }
                }
            }
            current_statement_begin__ = 413;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gauss_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& sigma,
             const int& link, std::ostream* pstream__) const {
        return pw_gauss(y, eta, sigma, link, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
GammaReg_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                 const T2__& shape,
                 const int& link,
                 const T4__& sum_log_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ ret;
            (void) ret;  // dummy to suppress unused var warning
            stan::math::initialize(ret, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 419;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 419;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 419;
            current_statement_begin__ = 420;
            stan::math::assign(ret, ((rows(y) * ((shape * log(shape)) - lgamma(shape))) + ((shape - 1) * sum_log_y)));
            current_statement_begin__ = 422;
            if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 423;
                stan::math::assign(ret, ((ret - (shape * sum(eta))) - (shape * sum(elt_divide(y,exp(eta))))));
            } else if (as_bool(logical_eq(link,1))) {
                current_statement_begin__ = 425;
                stan::math::assign(ret, ((ret - (shape * sum(log(eta)))) - (shape * sum(elt_divide(y,eta)))));
            } else {
                current_statement_begin__ = 427;
                stan::math::assign(ret, ((ret + (shape * sum(log(eta)))) - (shape * dot_product(eta,y))));
            }
            current_statement_begin__ = 428;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ret);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
GammaReg_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                 const T2__& shape,
                 const int& link,
                 const T4__& sum_log_y, std::ostream* pstream__) {
    return GammaReg_log<false>(y,eta,shape,link,sum_log_y, pstream__);
}


struct GammaReg_log_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T4__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                 const T2__& shape,
                 const int& link,
                 const T4__& sum_log_y, std::ostream* pstream__) const {
        return GammaReg_log(y, eta, shape, link, sum_log_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
pw_gamma(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(eta)));
            (void) ll;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 440;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,3))))) {
                current_statement_begin__ = 440;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 440;
            current_statement_begin__ = 441;
            if (as_bool(logical_eq(link,3))) {
                current_statement_begin__ = 442;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 443;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), gamma_log(get_base1(y,n,"y",1),shape,(shape * get_base1(eta,n,"eta",1))));
                }
            } else if (as_bool(logical_eq(link,2))) {
                current_statement_begin__ = 447;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 448;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), gamma_log(get_base1(y,n,"y",1),shape,(shape / exp(get_base1(eta,n,"eta",1)))));
                }
            } else {
                current_statement_begin__ = 452;
                for (int n = 1; n <= rows(eta); ++n) {
                    current_statement_begin__ = 453;
                    stan::math::assign(get_base1_lhs(ll,n,"ll",1), gamma_log(get_base1(y,n,"y",1),shape,(shape / get_base1(eta,n,"eta",1))));
                }
            }
            current_statement_begin__ = 456;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_gamma_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
             const T2__& shape,
             const int& link, std::ostream* pstream__) const {
        return pw_gamma(y, eta, shape, link, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inv_gaussian_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                     const T2__& lambda,
                     const T3__& sum_log_y,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 470;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((0.5 * rows(y)) * log((lambda / (2 * pi())))) - (1.5 * sum_log_y)) - ((0.5 * lambda) * dot_self(elt_divide(subtract(y,mu),elt_multiply(mu,sqrt_y))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
inv_gaussian_log(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                     const T2__& lambda,
                     const T3__& sum_log_y,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    return inv_gaussian_log<false>(y,mu,lambda,sum_log_y,sqrt_y, pstream__);
}


struct inv_gaussian_log_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,1>& mu,
                     const T2__& lambda,
                     const T3__& sum_log_y,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return inv_gaussian_log(y, mu, lambda, sum_log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
pw_inv_gaussian(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll(static_cast<Eigen::VectorXd::Index>(rows(y)));
            (void) ll;  // dummy to suppress unused var warning
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(rows(y)));
            (void) mu;  // dummy to suppress unused var warning
            stan::math::initialize(ll, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 490;
            if (as_bool((primitive_value(logical_lt(link,1)) || primitive_value(logical_gt(link,4))))) {
                current_statement_begin__ = 490;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "Invalid link";
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 490;
            current_statement_begin__ = 491;
            stan::math::assign(mu, linkinv_inv_gaussian(eta,link, pstream__));
            current_statement_begin__ = 492;
            for (int n = 1; n <= rows(y); ++n) {
                current_statement_begin__ = 493;
                stan::math::assign(get_base1_lhs(ll,n,"ll",1), ((-(0.5) * lambda) * square(((get_base1(y,n,"y",1) - get_base1(mu,n,"mu",1)) / (get_base1(mu,n,"mu",1) * get_base1(sqrt_y,n,"sqrt_y",1))))));
            }
            current_statement_begin__ = 494;
            stan::math::assign(ll, subtract(add(ll,(0.5 * log((lambda / (2 * pi()))))),multiply(1.5,log_y)));
            current_statement_begin__ = 495;
            return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pw_inv_gaussian_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& eta,
                    const T2__& lambda,
                    const int& link,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& log_y,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,1>& sqrt_y, std::ostream* pstream__) const {
        return pw_inv_gaussian(y, eta, lambda, link, log_y, sqrt_y, pstream__);
    }
};

template <typename T0__, typename T1__, class RNG>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
inv_gaussian_rng(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ z;
            (void) z;  // dummy to suppress unused var warning
            fun_scalar_t__ y;
            (void) y;  // dummy to suppress unused var warning
            fun_scalar_t__ x;
            (void) x;  // dummy to suppress unused var warning
            fun_scalar_t__ mu2;
            (void) mu2;  // dummy to suppress unused var warning
            stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(x, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(mu2, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 512;
            stan::math::assign(mu2, square(mu));
            current_statement_begin__ = 513;
            stan::math::assign(y, square(normal_rng(0,1, base_rng__)));
            current_statement_begin__ = 514;
            stan::math::assign(z, uniform_rng(0,1, base_rng__));
            current_statement_begin__ = 515;
            stan::math::assign(x, (mu + (((mu2 * y) - (mu * sqrt(((((4 * mu) * lambda) * y) + (mu2 * square(y)))))) / (2 * lambda))));
            current_statement_begin__ = 517;
            if (as_bool(logical_lte(z,(mu / (mu + x))))) {
                current_statement_begin__ = 517;
                return stan::math::promote_scalar<fun_return_scalar_t__>(x);
            } else {
                current_statement_begin__ = 518;
                return stan::math::promote_scalar<fun_return_scalar_t__>((mu2 / x));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_gaussian_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
    inline
    typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
                     const T1__& lambda, RNG& base_rng__, std::ostream* pstream__) const {
        return inv_gaussian_rng(mu, lambda, base_rng__, pstream__);
    }
};

template <typename T2__, typename T5__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T5__>::type, Eigen::Dynamic,1>
test_csr_matrix_times_vector(const int& m,
                                 const int& n,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                                 const std::vector<int>& v,
                                 const std::vector<int>& u,
                                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T5__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 534;
        return stan::math::promote_scalar<fun_return_scalar_t__>(csr_matrix_times_vector(m,n,w,v,u,b));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct test_csr_matrix_times_vector_functor__ {
    template <typename T2__, typename T5__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T5__>::type, Eigen::Dynamic,1>
    operator()(const int& m,
                                 const int& n,
                                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                                 const std::vector<int>& v,
                                 const std::vector<int>& u,
                                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& b, std::ostream* pstream__) const {
        return test_csr_matrix_times_vector(m, n, w, v, u, b, pstream__);
    }
};

class model_jm : public prob_grad {
private:
    int M;
    int Npat;
    vector<int> y_N;
    int sum_y_N;
    vector<int> y_beg;
    vector<int> y_end;
    vector<int> y_K;
    int sum_y_K;
    int e_K;
    int a_K;
    int quadnodes;
    int Npat_times_quadnodes;
    int sum_y_has_intercept;
    int sum_y_has_intercept_unbound;
    int sum_y_has_intercept_bound;
    vector<int> family;
    int any_fam_3;
    vector<int> link;
    int y_centre;
    vector<int> y_has_intercept;
    vector<int> y_has_intercept_unbound;
    vector<int> y_has_intercept_bound;
    vector_d y;
    vector_d y_xbar;
    matrix_d y_X;
    int num_non_zero;
    vector_d w;
    vector<int> v;
    vector<int> u;
    int basehaz_weibull;
    int e_centre;
    int e_has_intercept;
    int nrow_y_Xq;
    int nrow_e_Xq;
    matrix_d y_Xq;
    matrix_d e_Xq;
    vector_d e_times;
    vector_d e_d;
    vector_d e_xbar;
    int num_non_zero_Zq;
    vector_d w_Zq;
    vector<int> v_Zq;
    vector<int> u_Zq;
    vector_d quadweight_times_half_eventtime;
    int assoc;
    vector<int> has_assoc_ev;
    vector<int> has_assoc_es;
    vector<int> has_assoc_cv;
    vector<int> has_assoc_cs;
    int sum_has_assoc_ev;
    int sum_has_assoc_es;
    int sum_has_assoc_cv;
    int sum_has_assoc_cs;
    int size_which_b;
    vector<int> which_b;
    int t;
    vector<vector<int> > p;
    vector<int> l;
    vector<vector<int> > q;
    int len_theta_L;
    int len_b;
    int priorLong_dist;
    int priorLong_dist_for_intercept;
    int priorEvent_dist;
    int priorEvent_dist_for_intercept;
    int priorAssoc_dist;
    vector_d priorLong_mean;
    vector_d priorLong_mean_for_intercept;
    vector_d priorEvent_mean;
    double priorEvent_mean_for_intercept;
    vector_d priorAssoc_mean;
    vector_d priorLong_scale;
    vector_d priorLong_scale_for_intercept;
    vector_d priorEvent_scale;
    double priorEvent_scale_for_intercept;
    vector_d priorAssoc_scale;
    vector_d priorLong_df;
    vector_d priorLong_df_for_intercept;
    vector_d priorEvent_df;
    double priorEvent_df_for_intercept;
    vector_d priorAssoc_df;
    vector_d priorLong_scale_for_dispersion;
    double priorEvent_scale_for_weibull;
    vector_d shape;
    vector_d scale;
    int len_concentration;
    vector<double> concentration;
    int len_regularization;
    vector<double> regularization;
    int prior_PD;
    vector_d sqrt_y;
    vector_d log_y;
    vector<double> sum_log_y;
    vector_d e_log_times;
    int y_t_any_124;
    int y_t_all_124;
    int e_t_any_124;
    int e_t_all_124;
    int a_t_any_124;
    int a_t_all_124;
    int y_hs;
    int e_hs;
    int a_hs;
    int len_z_T;
    int len_var_group;
    int len_rho;
    vector<double> delta;
    int pos;
public:
    model_jm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_jm_namespace::model_jm";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "M", "int", context__.to_vec());
        M = int(0);
        vals_i__ = context__.vals_i("M");
        pos__ = 0;
        M = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Npat", "int", context__.to_vec());
        Npat = int(0);
        vals_i__ = context__.vals_i("Npat");
        pos__ = 0;
        Npat = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y_N", "int", context__.to_vec(M));
        validate_non_negative_index("y_N", "M", M);
        y_N = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_N");
        pos__ = 0;
        size_t y_N_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_N_limit_0__; ++i_0__) {
            y_N[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "sum_y_N", "int", context__.to_vec());
        sum_y_N = int(0);
        vals_i__ = context__.vals_i("sum_y_N");
        pos__ = 0;
        sum_y_N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y_beg", "int", context__.to_vec(M));
        validate_non_negative_index("y_beg", "M", M);
        y_beg = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_beg");
        pos__ = 0;
        size_t y_beg_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_beg_limit_0__; ++i_0__) {
            y_beg[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y_end", "int", context__.to_vec(M));
        validate_non_negative_index("y_end", "M", M);
        y_end = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_end");
        pos__ = 0;
        size_t y_end_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_end_limit_0__; ++i_0__) {
            y_end[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y_K", "int", context__.to_vec(M));
        validate_non_negative_index("y_K", "M", M);
        y_K = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_K");
        pos__ = 0;
        size_t y_K_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_K_limit_0__; ++i_0__) {
            y_K[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "sum_y_K", "int", context__.to_vec());
        sum_y_K = int(0);
        vals_i__ = context__.vals_i("sum_y_K");
        pos__ = 0;
        sum_y_K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "e_K", "int", context__.to_vec());
        e_K = int(0);
        vals_i__ = context__.vals_i("e_K");
        pos__ = 0;
        e_K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "a_K", "int", context__.to_vec());
        a_K = int(0);
        vals_i__ = context__.vals_i("a_K");
        pos__ = 0;
        a_K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "quadnodes", "int", context__.to_vec());
        quadnodes = int(0);
        vals_i__ = context__.vals_i("quadnodes");
        pos__ = 0;
        quadnodes = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Npat_times_quadnodes", "int", context__.to_vec());
        Npat_times_quadnodes = int(0);
        vals_i__ = context__.vals_i("Npat_times_quadnodes");
        pos__ = 0;
        Npat_times_quadnodes = vals_i__[pos__++];
        context__.validate_dims("data initialization", "sum_y_has_intercept", "int", context__.to_vec());
        sum_y_has_intercept = int(0);
        vals_i__ = context__.vals_i("sum_y_has_intercept");
        pos__ = 0;
        sum_y_has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "sum_y_has_intercept_unbound", "int", context__.to_vec());
        sum_y_has_intercept_unbound = int(0);
        vals_i__ = context__.vals_i("sum_y_has_intercept_unbound");
        pos__ = 0;
        sum_y_has_intercept_unbound = vals_i__[pos__++];
        context__.validate_dims("data initialization", "sum_y_has_intercept_bound", "int", context__.to_vec());
        sum_y_has_intercept_bound = int(0);
        vals_i__ = context__.vals_i("sum_y_has_intercept_bound");
        pos__ = 0;
        sum_y_has_intercept_bound = vals_i__[pos__++];
        context__.validate_dims("data initialization", "family", "int", context__.to_vec(M));
        validate_non_negative_index("family", "M", M);
        family = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("family");
        pos__ = 0;
        size_t family_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < family_limit_0__; ++i_0__) {
            family[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "any_fam_3", "int", context__.to_vec());
        any_fam_3 = int(0);
        vals_i__ = context__.vals_i("any_fam_3");
        pos__ = 0;
        any_fam_3 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "link", "int", context__.to_vec(M));
        validate_non_negative_index("link", "M", M);
        link = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("link");
        pos__ = 0;
        size_t link_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < link_limit_0__; ++i_0__) {
            link[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y_centre", "int", context__.to_vec());
        y_centre = int(0);
        vals_i__ = context__.vals_i("y_centre");
        pos__ = 0;
        y_centre = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y_has_intercept", "int", context__.to_vec(M));
        validate_non_negative_index("y_has_intercept", "M", M);
        y_has_intercept = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_has_intercept");
        pos__ = 0;
        size_t y_has_intercept_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_has_intercept_limit_0__; ++i_0__) {
            y_has_intercept[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y_has_intercept_unbound", "int", context__.to_vec(M));
        validate_non_negative_index("y_has_intercept_unbound", "M", M);
        y_has_intercept_unbound = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_has_intercept_unbound");
        pos__ = 0;
        size_t y_has_intercept_unbound_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_has_intercept_unbound_limit_0__; ++i_0__) {
            y_has_intercept_unbound[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y_has_intercept_bound", "int", context__.to_vec(M));
        validate_non_negative_index("y_has_intercept_bound", "M", M);
        y_has_intercept_bound = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("y_has_intercept_bound");
        pos__ = 0;
        size_t y_has_intercept_bound_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < y_has_intercept_bound_limit_0__; ++i_0__) {
            y_has_intercept_bound[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("y", "sum_y_N", sum_y_N);
        y = vector_d(static_cast<Eigen::VectorXd::Index>(sum_y_N));
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(sum_y_N));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = sum_y_N;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("y_xbar", "(sum_y_K * logical_gt(y_centre,0))", (sum_y_K * logical_gt(y_centre,0)));
        y_xbar = vector_d(static_cast<Eigen::VectorXd::Index>((sum_y_K * logical_gt(y_centre,0))));
        context__.validate_dims("data initialization", "y_xbar", "vector_d", context__.to_vec((sum_y_K * logical_gt(y_centre,0))));
        vals_r__ = context__.vals_r("y_xbar");
        pos__ = 0;
        size_t y_xbar_i_vec_lim__ = (sum_y_K * logical_gt(y_centre,0));
        for (size_t i_vec__ = 0; i_vec__ < y_xbar_i_vec_lim__; ++i_vec__) {
            y_xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "y_X", "matrix_d", context__.to_vec(sum_y_N,sum_y_K));
        validate_non_negative_index("y_X", "sum_y_N", sum_y_N);
        validate_non_negative_index("y_X", "sum_y_K", sum_y_K);
        y_X = matrix_d(static_cast<Eigen::VectorXd::Index>(sum_y_N),static_cast<Eigen::VectorXd::Index>(sum_y_K));
        vals_r__ = context__.vals_r("y_X");
        pos__ = 0;
        size_t y_X_m_mat_lim__ = sum_y_N;
        size_t y_X_n_mat_lim__ = sum_y_K;
        for (size_t n_mat__ = 0; n_mat__ < y_X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < y_X_m_mat_lim__; ++m_mat__) {
                y_X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec());
        num_non_zero = int(0);
        vals_i__ = context__.vals_i("num_non_zero");
        pos__ = 0;
        num_non_zero = vals_i__[pos__++];
        validate_non_negative_index("w", "num_non_zero", num_non_zero);
        w = vector_d(static_cast<Eigen::VectorXd::Index>(num_non_zero));
        context__.validate_dims("data initialization", "w", "vector_d", context__.to_vec(num_non_zero));
        vals_r__ = context__.vals_r("w");
        pos__ = 0;
        size_t w_i_vec_lim__ = num_non_zero;
        for (size_t i_vec__ = 0; i_vec__ < w_i_vec_lim__; ++i_vec__) {
            w[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "v", "int", context__.to_vec(num_non_zero));
        validate_non_negative_index("v", "num_non_zero", num_non_zero);
        v = std::vector<int>(num_non_zero,int(0));
        vals_i__ = context__.vals_i("v");
        pos__ = 0;
        size_t v_limit_0__ = num_non_zero;
        for (size_t i_0__ = 0; i_0__ < v_limit_0__; ++i_0__) {
            v[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u", "int", context__.to_vec((sum_y_N + 1)));
        validate_non_negative_index("u", "(sum_y_N + 1)", (sum_y_N + 1));
        u = std::vector<int>((sum_y_N + 1),int(0));
        vals_i__ = context__.vals_i("u");
        pos__ = 0;
        size_t u_limit_0__ = (sum_y_N + 1);
        for (size_t i_0__ = 0; i_0__ < u_limit_0__; ++i_0__) {
            u[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "basehaz_weibull", "int", context__.to_vec());
        basehaz_weibull = int(0);
        vals_i__ = context__.vals_i("basehaz_weibull");
        pos__ = 0;
        basehaz_weibull = vals_i__[pos__++];
        context__.validate_dims("data initialization", "e_centre", "int", context__.to_vec());
        e_centre = int(0);
        vals_i__ = context__.vals_i("e_centre");
        pos__ = 0;
        e_centre = vals_i__[pos__++];
        context__.validate_dims("data initialization", "e_has_intercept", "int", context__.to_vec());
        e_has_intercept = int(0);
        vals_i__ = context__.vals_i("e_has_intercept");
        pos__ = 0;
        e_has_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nrow_y_Xq", "int", context__.to_vec());
        nrow_y_Xq = int(0);
        vals_i__ = context__.vals_i("nrow_y_Xq");
        pos__ = 0;
        nrow_y_Xq = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nrow_e_Xq", "int", context__.to_vec());
        nrow_e_Xq = int(0);
        vals_i__ = context__.vals_i("nrow_e_Xq");
        pos__ = 0;
        nrow_e_Xq = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y_Xq", "matrix_d", context__.to_vec((M * nrow_y_Xq),sum_y_K));
        validate_non_negative_index("y_Xq", "(M * nrow_y_Xq)", (M * nrow_y_Xq));
        validate_non_negative_index("y_Xq", "sum_y_K", sum_y_K);
        y_Xq = matrix_d(static_cast<Eigen::VectorXd::Index>((M * nrow_y_Xq)),static_cast<Eigen::VectorXd::Index>(sum_y_K));
        vals_r__ = context__.vals_r("y_Xq");
        pos__ = 0;
        size_t y_Xq_m_mat_lim__ = (M * nrow_y_Xq);
        size_t y_Xq_n_mat_lim__ = sum_y_K;
        for (size_t n_mat__ = 0; n_mat__ < y_Xq_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < y_Xq_m_mat_lim__; ++m_mat__) {
                y_Xq(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "e_Xq", "matrix_d", context__.to_vec(nrow_e_Xq,e_K));
        validate_non_negative_index("e_Xq", "nrow_e_Xq", nrow_e_Xq);
        validate_non_negative_index("e_Xq", "e_K", e_K);
        e_Xq = matrix_d(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq),static_cast<Eigen::VectorXd::Index>(e_K));
        vals_r__ = context__.vals_r("e_Xq");
        pos__ = 0;
        size_t e_Xq_m_mat_lim__ = nrow_e_Xq;
        size_t e_Xq_n_mat_lim__ = e_K;
        for (size_t n_mat__ = 0; n_mat__ < e_Xq_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < e_Xq_m_mat_lim__; ++m_mat__) {
                e_Xq(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("e_times", "nrow_e_Xq", nrow_e_Xq);
        e_times = vector_d(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        context__.validate_dims("data initialization", "e_times", "vector_d", context__.to_vec(nrow_e_Xq));
        vals_r__ = context__.vals_r("e_times");
        pos__ = 0;
        size_t e_times_i_vec_lim__ = nrow_e_Xq;
        for (size_t i_vec__ = 0; i_vec__ < e_times_i_vec_lim__; ++i_vec__) {
            e_times[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("e_d", "nrow_e_Xq", nrow_e_Xq);
        e_d = vector_d(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        context__.validate_dims("data initialization", "e_d", "vector_d", context__.to_vec(nrow_e_Xq));
        vals_r__ = context__.vals_r("e_d");
        pos__ = 0;
        size_t e_d_i_vec_lim__ = nrow_e_Xq;
        for (size_t i_vec__ = 0; i_vec__ < e_d_i_vec_lim__; ++i_vec__) {
            e_d[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("e_xbar", "(e_K * logical_gt(e_centre,0))", (e_K * logical_gt(e_centre,0)));
        e_xbar = vector_d(static_cast<Eigen::VectorXd::Index>((e_K * logical_gt(e_centre,0))));
        context__.validate_dims("data initialization", "e_xbar", "vector_d", context__.to_vec((e_K * logical_gt(e_centre,0))));
        vals_r__ = context__.vals_r("e_xbar");
        pos__ = 0;
        size_t e_xbar_i_vec_lim__ = (e_K * logical_gt(e_centre,0));
        for (size_t i_vec__ = 0; i_vec__ < e_xbar_i_vec_lim__; ++i_vec__) {
            e_xbar[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "num_non_zero_Zq", "int", context__.to_vec());
        num_non_zero_Zq = int(0);
        vals_i__ = context__.vals_i("num_non_zero_Zq");
        pos__ = 0;
        num_non_zero_Zq = vals_i__[pos__++];
        validate_non_negative_index("w_Zq", "num_non_zero_Zq", num_non_zero_Zq);
        w_Zq = vector_d(static_cast<Eigen::VectorXd::Index>(num_non_zero_Zq));
        context__.validate_dims("data initialization", "w_Zq", "vector_d", context__.to_vec(num_non_zero_Zq));
        vals_r__ = context__.vals_r("w_Zq");
        pos__ = 0;
        size_t w_Zq_i_vec_lim__ = num_non_zero_Zq;
        for (size_t i_vec__ = 0; i_vec__ < w_Zq_i_vec_lim__; ++i_vec__) {
            w_Zq[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "v_Zq", "int", context__.to_vec(num_non_zero_Zq));
        validate_non_negative_index("v_Zq", "num_non_zero_Zq", num_non_zero_Zq);
        v_Zq = std::vector<int>(num_non_zero_Zq,int(0));
        vals_i__ = context__.vals_i("v_Zq");
        pos__ = 0;
        size_t v_Zq_limit_0__ = num_non_zero_Zq;
        for (size_t i_0__ = 0; i_0__ < v_Zq_limit_0__; ++i_0__) {
            v_Zq[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "u_Zq", "int", context__.to_vec(((M * nrow_y_Xq) + 1)));
        validate_non_negative_index("u_Zq", "((M * nrow_y_Xq) + 1)", ((M * nrow_y_Xq) + 1));
        u_Zq = std::vector<int>(((M * nrow_y_Xq) + 1),int(0));
        vals_i__ = context__.vals_i("u_Zq");
        pos__ = 0;
        size_t u_Zq_limit_0__ = ((M * nrow_y_Xq) + 1);
        for (size_t i_0__ = 0; i_0__ < u_Zq_limit_0__; ++i_0__) {
            u_Zq[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("quadweight_times_half_eventtime", "Npat_times_quadnodes", Npat_times_quadnodes);
        quadweight_times_half_eventtime = vector_d(static_cast<Eigen::VectorXd::Index>(Npat_times_quadnodes));
        context__.validate_dims("data initialization", "quadweight_times_half_eventtime", "vector_d", context__.to_vec(Npat_times_quadnodes));
        vals_r__ = context__.vals_r("quadweight_times_half_eventtime");
        pos__ = 0;
        size_t quadweight_times_half_eventtime_i_vec_lim__ = Npat_times_quadnodes;
        for (size_t i_vec__ = 0; i_vec__ < quadweight_times_half_eventtime_i_vec_lim__; ++i_vec__) {
            quadweight_times_half_eventtime[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "assoc", "int", context__.to_vec());
        assoc = int(0);
        vals_i__ = context__.vals_i("assoc");
        pos__ = 0;
        assoc = vals_i__[pos__++];
        context__.validate_dims("data initialization", "has_assoc_ev", "int", context__.to_vec(M));
        validate_non_negative_index("has_assoc_ev", "M", M);
        has_assoc_ev = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("has_assoc_ev");
        pos__ = 0;
        size_t has_assoc_ev_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < has_assoc_ev_limit_0__; ++i_0__) {
            has_assoc_ev[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "has_assoc_es", "int", context__.to_vec(M));
        validate_non_negative_index("has_assoc_es", "M", M);
        has_assoc_es = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("has_assoc_es");
        pos__ = 0;
        size_t has_assoc_es_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < has_assoc_es_limit_0__; ++i_0__) {
            has_assoc_es[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "has_assoc_cv", "int", context__.to_vec(M));
        validate_non_negative_index("has_assoc_cv", "M", M);
        has_assoc_cv = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("has_assoc_cv");
        pos__ = 0;
        size_t has_assoc_cv_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < has_assoc_cv_limit_0__; ++i_0__) {
            has_assoc_cv[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "has_assoc_cs", "int", context__.to_vec(M));
        validate_non_negative_index("has_assoc_cs", "M", M);
        has_assoc_cs = std::vector<int>(M,int(0));
        vals_i__ = context__.vals_i("has_assoc_cs");
        pos__ = 0;
        size_t has_assoc_cs_limit_0__ = M;
        for (size_t i_0__ = 0; i_0__ < has_assoc_cs_limit_0__; ++i_0__) {
            has_assoc_cs[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "sum_has_assoc_ev", "int", context__.to_vec());
        sum_has_assoc_ev = int(0);
        vals_i__ = context__.vals_i("sum_has_assoc_ev");
        pos__ = 0;
        sum_has_assoc_ev = vals_i__[pos__++];
        context__.validate_dims("data initialization", "sum_has_assoc_es", "int", context__.to_vec());
        sum_has_assoc_es = int(0);
        vals_i__ = context__.vals_i("sum_has_assoc_es");
        pos__ = 0;
        sum_has_assoc_es = vals_i__[pos__++];
        context__.validate_dims("data initialization", "sum_has_assoc_cv", "int", context__.to_vec());
        sum_has_assoc_cv = int(0);
        vals_i__ = context__.vals_i("sum_has_assoc_cv");
        pos__ = 0;
        sum_has_assoc_cv = vals_i__[pos__++];
        context__.validate_dims("data initialization", "sum_has_assoc_cs", "int", context__.to_vec());
        sum_has_assoc_cs = int(0);
        vals_i__ = context__.vals_i("sum_has_assoc_cs");
        pos__ = 0;
        sum_has_assoc_cs = vals_i__[pos__++];
        context__.validate_dims("data initialization", "size_which_b", "int", context__.to_vec());
        size_which_b = int(0);
        vals_i__ = context__.vals_i("size_which_b");
        pos__ = 0;
        size_which_b = vals_i__[pos__++];
        context__.validate_dims("data initialization", "which_b", "int", context__.to_vec(size_which_b));
        validate_non_negative_index("which_b", "size_which_b", size_which_b);
        which_b = std::vector<int>(size_which_b,int(0));
        vals_i__ = context__.vals_i("which_b");
        pos__ = 0;
        size_t which_b_limit_0__ = size_which_b;
        for (size_t i_0__ = 0; i_0__ < which_b_limit_0__; ++i_0__) {
            which_b[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "t", "int", context__.to_vec());
        t = int(0);
        vals_i__ = context__.vals_i("t");
        pos__ = 0;
        t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "p", "int", context__.to_vec(t,M));
        validate_non_negative_index("p", "t", t);
        validate_non_negative_index("p", "M", M);
        p = std::vector<std::vector<int> >(t,std::vector<int>(M,int(0)));
        vals_i__ = context__.vals_i("p");
        pos__ = 0;
        size_t p_limit_1__ = M;
        for (size_t i_1__ = 0; i_1__ < p_limit_1__; ++i_1__) {
            size_t p_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < p_limit_0__; ++i_0__) {
                p[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
        validate_non_negative_index("l", "t", t);
        l = std::vector<int>(t,int(0));
        vals_i__ = context__.vals_i("l");
        pos__ = 0;
        size_t l_limit_0__ = t;
        for (size_t i_0__ = 0; i_0__ < l_limit_0__; ++i_0__) {
            l[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "q", "int", context__.to_vec(t,M));
        validate_non_negative_index("q", "t", t);
        validate_non_negative_index("q", "M", M);
        q = std::vector<std::vector<int> >(t,std::vector<int>(M,int(0)));
        vals_i__ = context__.vals_i("q");
        pos__ = 0;
        size_t q_limit_1__ = M;
        for (size_t i_1__ = 0; i_1__ < q_limit_1__; ++i_1__) {
            size_t q_limit_0__ = t;
            for (size_t i_0__ = 0; i_0__ < q_limit_0__; ++i_0__) {
                q[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
        len_theta_L = int(0);
        vals_i__ = context__.vals_i("len_theta_L");
        pos__ = 0;
        len_theta_L = vals_i__[pos__++];
        context__.validate_dims("data initialization", "len_b", "int", context__.to_vec());
        len_b = int(0);
        vals_i__ = context__.vals_i("len_b");
        pos__ = 0;
        len_b = vals_i__[pos__++];
        context__.validate_dims("data initialization", "priorLong_dist", "int", context__.to_vec());
        priorLong_dist = int(0);
        vals_i__ = context__.vals_i("priorLong_dist");
        pos__ = 0;
        priorLong_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "priorLong_dist_for_intercept", "int", context__.to_vec());
        priorLong_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("priorLong_dist_for_intercept");
        pos__ = 0;
        priorLong_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "priorEvent_dist", "int", context__.to_vec());
        priorEvent_dist = int(0);
        vals_i__ = context__.vals_i("priorEvent_dist");
        pos__ = 0;
        priorEvent_dist = vals_i__[pos__++];
        context__.validate_dims("data initialization", "priorEvent_dist_for_intercept", "int", context__.to_vec());
        priorEvent_dist_for_intercept = int(0);
        vals_i__ = context__.vals_i("priorEvent_dist_for_intercept");
        pos__ = 0;
        priorEvent_dist_for_intercept = vals_i__[pos__++];
        context__.validate_dims("data initialization", "priorAssoc_dist", "int", context__.to_vec());
        priorAssoc_dist = int(0);
        vals_i__ = context__.vals_i("priorAssoc_dist");
        pos__ = 0;
        priorAssoc_dist = vals_i__[pos__++];
        validate_non_negative_index("priorLong_mean", "sum_y_K", sum_y_K);
        priorLong_mean = vector_d(static_cast<Eigen::VectorXd::Index>(sum_y_K));
        context__.validate_dims("data initialization", "priorLong_mean", "vector_d", context__.to_vec(sum_y_K));
        vals_r__ = context__.vals_r("priorLong_mean");
        pos__ = 0;
        size_t priorLong_mean_i_vec_lim__ = sum_y_K;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_mean_i_vec_lim__; ++i_vec__) {
            priorLong_mean[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorLong_mean_for_intercept", "M", M);
        priorLong_mean_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
        context__.validate_dims("data initialization", "priorLong_mean_for_intercept", "vector_d", context__.to_vec(M));
        vals_r__ = context__.vals_r("priorLong_mean_for_intercept");
        pos__ = 0;
        size_t priorLong_mean_for_intercept_i_vec_lim__ = M;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_mean_for_intercept_i_vec_lim__; ++i_vec__) {
            priorLong_mean_for_intercept[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorEvent_mean", "e_K", e_K);
        priorEvent_mean = vector_d(static_cast<Eigen::VectorXd::Index>(e_K));
        context__.validate_dims("data initialization", "priorEvent_mean", "vector_d", context__.to_vec(e_K));
        vals_r__ = context__.vals_r("priorEvent_mean");
        pos__ = 0;
        size_t priorEvent_mean_i_vec_lim__ = e_K;
        for (size_t i_vec__ = 0; i_vec__ < priorEvent_mean_i_vec_lim__; ++i_vec__) {
            priorEvent_mean[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "priorEvent_mean_for_intercept", "double", context__.to_vec());
        priorEvent_mean_for_intercept = double(0);
        vals_r__ = context__.vals_r("priorEvent_mean_for_intercept");
        pos__ = 0;
        priorEvent_mean_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("priorAssoc_mean", "a_K", a_K);
        priorAssoc_mean = vector_d(static_cast<Eigen::VectorXd::Index>(a_K));
        context__.validate_dims("data initialization", "priorAssoc_mean", "vector_d", context__.to_vec(a_K));
        vals_r__ = context__.vals_r("priorAssoc_mean");
        pos__ = 0;
        size_t priorAssoc_mean_i_vec_lim__ = a_K;
        for (size_t i_vec__ = 0; i_vec__ < priorAssoc_mean_i_vec_lim__; ++i_vec__) {
            priorAssoc_mean[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorLong_scale", "sum_y_K", sum_y_K);
        priorLong_scale = vector_d(static_cast<Eigen::VectorXd::Index>(sum_y_K));
        context__.validate_dims("data initialization", "priorLong_scale", "vector_d", context__.to_vec(sum_y_K));
        vals_r__ = context__.vals_r("priorLong_scale");
        pos__ = 0;
        size_t priorLong_scale_i_vec_lim__ = sum_y_K;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_scale_i_vec_lim__; ++i_vec__) {
            priorLong_scale[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorLong_scale_for_intercept", "M", M);
        priorLong_scale_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
        context__.validate_dims("data initialization", "priorLong_scale_for_intercept", "vector_d", context__.to_vec(M));
        vals_r__ = context__.vals_r("priorLong_scale_for_intercept");
        pos__ = 0;
        size_t priorLong_scale_for_intercept_i_vec_lim__ = M;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_scale_for_intercept_i_vec_lim__; ++i_vec__) {
            priorLong_scale_for_intercept[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorEvent_scale", "e_K", e_K);
        priorEvent_scale = vector_d(static_cast<Eigen::VectorXd::Index>(e_K));
        context__.validate_dims("data initialization", "priorEvent_scale", "vector_d", context__.to_vec(e_K));
        vals_r__ = context__.vals_r("priorEvent_scale");
        pos__ = 0;
        size_t priorEvent_scale_i_vec_lim__ = e_K;
        for (size_t i_vec__ = 0; i_vec__ < priorEvent_scale_i_vec_lim__; ++i_vec__) {
            priorEvent_scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "priorEvent_scale_for_intercept", "double", context__.to_vec());
        priorEvent_scale_for_intercept = double(0);
        vals_r__ = context__.vals_r("priorEvent_scale_for_intercept");
        pos__ = 0;
        priorEvent_scale_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("priorAssoc_scale", "a_K", a_K);
        priorAssoc_scale = vector_d(static_cast<Eigen::VectorXd::Index>(a_K));
        context__.validate_dims("data initialization", "priorAssoc_scale", "vector_d", context__.to_vec(a_K));
        vals_r__ = context__.vals_r("priorAssoc_scale");
        pos__ = 0;
        size_t priorAssoc_scale_i_vec_lim__ = a_K;
        for (size_t i_vec__ = 0; i_vec__ < priorAssoc_scale_i_vec_lim__; ++i_vec__) {
            priorAssoc_scale[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorLong_df", "sum_y_K", sum_y_K);
        priorLong_df = vector_d(static_cast<Eigen::VectorXd::Index>(sum_y_K));
        context__.validate_dims("data initialization", "priorLong_df", "vector_d", context__.to_vec(sum_y_K));
        vals_r__ = context__.vals_r("priorLong_df");
        pos__ = 0;
        size_t priorLong_df_i_vec_lim__ = sum_y_K;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_df_i_vec_lim__; ++i_vec__) {
            priorLong_df[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorLong_df_for_intercept", "M", M);
        priorLong_df_for_intercept = vector_d(static_cast<Eigen::VectorXd::Index>(M));
        context__.validate_dims("data initialization", "priorLong_df_for_intercept", "vector_d", context__.to_vec(M));
        vals_r__ = context__.vals_r("priorLong_df_for_intercept");
        pos__ = 0;
        size_t priorLong_df_for_intercept_i_vec_lim__ = M;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_df_for_intercept_i_vec_lim__; ++i_vec__) {
            priorLong_df_for_intercept[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorEvent_df", "e_K", e_K);
        priorEvent_df = vector_d(static_cast<Eigen::VectorXd::Index>(e_K));
        context__.validate_dims("data initialization", "priorEvent_df", "vector_d", context__.to_vec(e_K));
        vals_r__ = context__.vals_r("priorEvent_df");
        pos__ = 0;
        size_t priorEvent_df_i_vec_lim__ = e_K;
        for (size_t i_vec__ = 0; i_vec__ < priorEvent_df_i_vec_lim__; ++i_vec__) {
            priorEvent_df[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "priorEvent_df_for_intercept", "double", context__.to_vec());
        priorEvent_df_for_intercept = double(0);
        vals_r__ = context__.vals_r("priorEvent_df_for_intercept");
        pos__ = 0;
        priorEvent_df_for_intercept = vals_r__[pos__++];
        validate_non_negative_index("priorAssoc_df", "a_K", a_K);
        priorAssoc_df = vector_d(static_cast<Eigen::VectorXd::Index>(a_K));
        context__.validate_dims("data initialization", "priorAssoc_df", "vector_d", context__.to_vec(a_K));
        vals_r__ = context__.vals_r("priorAssoc_df");
        pos__ = 0;
        size_t priorAssoc_df_i_vec_lim__ = a_K;
        for (size_t i_vec__ = 0; i_vec__ < priorAssoc_df_i_vec_lim__; ++i_vec__) {
            priorAssoc_df[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("priorLong_scale_for_dispersion", "M", M);
        priorLong_scale_for_dispersion = vector_d(static_cast<Eigen::VectorXd::Index>(M));
        context__.validate_dims("data initialization", "priorLong_scale_for_dispersion", "vector_d", context__.to_vec(M));
        vals_r__ = context__.vals_r("priorLong_scale_for_dispersion");
        pos__ = 0;
        size_t priorLong_scale_for_dispersion_i_vec_lim__ = M;
        for (size_t i_vec__ = 0; i_vec__ < priorLong_scale_for_dispersion_i_vec_lim__; ++i_vec__) {
            priorLong_scale_for_dispersion[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "priorEvent_scale_for_weibull", "double", context__.to_vec());
        priorEvent_scale_for_weibull = double(0);
        vals_r__ = context__.vals_r("priorEvent_scale_for_weibull");
        pos__ = 0;
        priorEvent_scale_for_weibull = vals_r__[pos__++];
        validate_non_negative_index("shape", "t", t);
        shape = vector_d(static_cast<Eigen::VectorXd::Index>(t));
        context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("shape");
        pos__ = 0;
        size_t shape_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < shape_i_vec_lim__; ++i_vec__) {
            shape[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("scale", "t", t);
        scale = vector_d(static_cast<Eigen::VectorXd::Index>(t));
        context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
        vals_r__ = context__.vals_r("scale");
        pos__ = 0;
        size_t scale_i_vec_lim__ = t;
        for (size_t i_vec__ = 0; i_vec__ < scale_i_vec_lim__; ++i_vec__) {
            scale[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
        len_concentration = int(0);
        vals_i__ = context__.vals_i("len_concentration");
        pos__ = 0;
        len_concentration = vals_i__[pos__++];
        context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
        validate_non_negative_index("concentration", "len_concentration", len_concentration);
        concentration = std::vector<double>(len_concentration,double(0));
        vals_r__ = context__.vals_r("concentration");
        pos__ = 0;
        size_t concentration_limit_0__ = len_concentration;
        for (size_t i_0__ = 0; i_0__ < concentration_limit_0__; ++i_0__) {
            concentration[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
        len_regularization = int(0);
        vals_i__ = context__.vals_i("len_regularization");
        pos__ = 0;
        len_regularization = vals_i__[pos__++];
        context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
        validate_non_negative_index("regularization", "len_regularization", len_regularization);
        regularization = std::vector<double>(len_regularization,double(0));
        vals_r__ = context__.vals_r("regularization");
        pos__ = 0;
        size_t regularization_limit_0__ = len_regularization;
        for (size_t i_0__ = 0; i_0__ < regularization_limit_0__; ++i_0__) {
            regularization[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_PD", "int", context__.to_vec());
        prior_PD = int(0);
        vals_i__ = context__.vals_i("prior_PD");
        pos__ = 0;
        prior_PD = vals_i__[pos__++];

        // validate data
        check_greater_or_equal(function__,"M",M,1);
        check_greater_or_equal(function__,"Npat",Npat,0);
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_N[k0__]",y_N[k0__],0);
        }
        check_greater_or_equal(function__,"sum_y_N",sum_y_N,0);
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_beg[k0__]",y_beg[k0__],0);
            check_less_or_equal(function__,"y_beg[k0__]",y_beg[k0__],sum_y_N);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_end[k0__]",y_end[k0__],0);
            check_less_or_equal(function__,"y_end[k0__]",y_end[k0__],sum_y_N);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_K[k0__]",y_K[k0__],0);
        }
        check_greater_or_equal(function__,"sum_y_K",sum_y_K,0);
        check_greater_or_equal(function__,"e_K",e_K,0);
        check_greater_or_equal(function__,"a_K",a_K,0);
        check_greater_or_equal(function__,"quadnodes",quadnodes,0);
        check_greater_or_equal(function__,"Npat_times_quadnodes",Npat_times_quadnodes,0);
        check_greater_or_equal(function__,"sum_y_has_intercept",sum_y_has_intercept,0);
        check_less_or_equal(function__,"sum_y_has_intercept",sum_y_has_intercept,M);
        check_greater_or_equal(function__,"sum_y_has_intercept_unbound",sum_y_has_intercept_unbound,0);
        check_less_or_equal(function__,"sum_y_has_intercept_unbound",sum_y_has_intercept_unbound,M);
        check_greater_or_equal(function__,"sum_y_has_intercept_bound",sum_y_has_intercept_bound,0);
        check_less_or_equal(function__,"sum_y_has_intercept_bound",sum_y_has_intercept_bound,M);
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"family[k0__]",family[k0__],1);
        }
        check_greater_or_equal(function__,"any_fam_3",any_fam_3,0);
        check_less_or_equal(function__,"any_fam_3",any_fam_3,1);
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"link[k0__]",link[k0__],1);
        }
        check_greater_or_equal(function__,"y_centre",y_centre,0);
        check_less_or_equal(function__,"y_centre",y_centre,1);
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_has_intercept[k0__]",y_has_intercept[k0__],0);
            check_less_or_equal(function__,"y_has_intercept[k0__]",y_has_intercept[k0__],1);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_has_intercept_unbound[k0__]",y_has_intercept_unbound[k0__],0);
            check_less_or_equal(function__,"y_has_intercept_unbound[k0__]",y_has_intercept_unbound[k0__],1);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"y_has_intercept_bound[k0__]",y_has_intercept_bound[k0__],0);
            check_less_or_equal(function__,"y_has_intercept_bound[k0__]",y_has_intercept_bound[k0__],1);
        }
        check_greater_or_equal(function__,"num_non_zero",num_non_zero,0);
        for (int k0__ = 0; k0__ < num_non_zero; ++k0__) {
            check_greater_or_equal(function__,"v[k0__]",v[k0__],0);
        }
        for (int k0__ = 0; k0__ < (sum_y_N + 1); ++k0__) {
            check_greater_or_equal(function__,"u[k0__]",u[k0__],0);
        }
        check_greater_or_equal(function__,"basehaz_weibull",basehaz_weibull,0);
        check_less_or_equal(function__,"basehaz_weibull",basehaz_weibull,1);
        check_greater_or_equal(function__,"e_centre",e_centre,0);
        check_less_or_equal(function__,"e_centre",e_centre,1);
        check_greater_or_equal(function__,"e_has_intercept",e_has_intercept,0);
        check_less_or_equal(function__,"e_has_intercept",e_has_intercept,1);
        check_greater_or_equal(function__,"nrow_y_Xq",nrow_y_Xq,0);
        check_greater_or_equal(function__,"nrow_e_Xq",nrow_e_Xq,0);
        check_greater_or_equal(function__,"num_non_zero_Zq",num_non_zero_Zq,0);
        for (int k0__ = 0; k0__ < num_non_zero_Zq; ++k0__) {
            check_greater_or_equal(function__,"v_Zq[k0__]",v_Zq[k0__],0);
        }
        for (int k0__ = 0; k0__ < ((M * nrow_y_Xq) + 1); ++k0__) {
            check_greater_or_equal(function__,"u_Zq[k0__]",u_Zq[k0__],0);
        }
        check_greater_or_equal(function__,"assoc",assoc,0);
        check_less_or_equal(function__,"assoc",assoc,1);
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"has_assoc_ev[k0__]",has_assoc_ev[k0__],0);
            check_less_or_equal(function__,"has_assoc_ev[k0__]",has_assoc_ev[k0__],1);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"has_assoc_es[k0__]",has_assoc_es[k0__],0);
            check_less_or_equal(function__,"has_assoc_es[k0__]",has_assoc_es[k0__],1);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"has_assoc_cv[k0__]",has_assoc_cv[k0__],0);
            check_less_or_equal(function__,"has_assoc_cv[k0__]",has_assoc_cv[k0__],1);
        }
        for (int k0__ = 0; k0__ < M; ++k0__) {
            check_greater_or_equal(function__,"has_assoc_cs[k0__]",has_assoc_cs[k0__],0);
            check_less_or_equal(function__,"has_assoc_cs[k0__]",has_assoc_cs[k0__],1);
        }
        check_greater_or_equal(function__,"sum_has_assoc_ev",sum_has_assoc_ev,0);
        check_less_or_equal(function__,"sum_has_assoc_ev",sum_has_assoc_ev,M);
        check_greater_or_equal(function__,"sum_has_assoc_es",sum_has_assoc_es,0);
        check_less_or_equal(function__,"sum_has_assoc_es",sum_has_assoc_es,M);
        check_greater_or_equal(function__,"sum_has_assoc_cv",sum_has_assoc_cv,0);
        check_less_or_equal(function__,"sum_has_assoc_cv",sum_has_assoc_cv,M);
        check_greater_or_equal(function__,"sum_has_assoc_cs",sum_has_assoc_cs,0);
        check_less_or_equal(function__,"sum_has_assoc_cs",sum_has_assoc_cs,M);
        check_greater_or_equal(function__,"size_which_b",size_which_b,0);
        for (int k0__ = 0; k0__ < size_which_b; ++k0__) {
            check_greater_or_equal(function__,"which_b[k0__]",which_b[k0__],1);
        }
        check_greater_or_equal(function__,"t",t,1);
        for (int k0__ = 0; k0__ < t; ++k0__) {
            for (int k1__ = 0; k1__ < M; ++k1__) {
                check_greater_or_equal(function__,"p[k0__][k1__]",p[k0__][k1__],0);
            }
        }
        for (int k0__ = 0; k0__ < t; ++k0__) {
            check_greater_or_equal(function__,"l[k0__]",l[k0__],1);
        }
        for (int k0__ = 0; k0__ < t; ++k0__) {
            for (int k1__ = 0; k1__ < M; ++k1__) {
                check_greater_or_equal(function__,"q[k0__][k1__]",q[k0__][k1__],0);
            }
        }
        check_greater_or_equal(function__,"len_theta_L",len_theta_L,0);
        check_greater_or_equal(function__,"len_b",len_b,0);
        check_greater_or_equal(function__,"priorLong_dist",priorLong_dist,0);
        check_less_or_equal(function__,"priorLong_dist",priorLong_dist,4);
        check_greater_or_equal(function__,"priorLong_dist_for_intercept",priorLong_dist_for_intercept,0);
        check_less_or_equal(function__,"priorLong_dist_for_intercept",priorLong_dist_for_intercept,2);
        check_greater_or_equal(function__,"priorEvent_dist",priorEvent_dist,0);
        check_less_or_equal(function__,"priorEvent_dist",priorEvent_dist,4);
        check_greater_or_equal(function__,"priorEvent_dist_for_intercept",priorEvent_dist_for_intercept,0);
        check_less_or_equal(function__,"priorEvent_dist_for_intercept",priorEvent_dist_for_intercept,2);
        check_greater_or_equal(function__,"priorAssoc_dist",priorAssoc_dist,0);
        check_less_or_equal(function__,"priorAssoc_dist",priorAssoc_dist,4);
        check_greater_or_equal(function__,"priorLong_scale",priorLong_scale,0);
        check_greater_or_equal(function__,"priorLong_scale_for_intercept",priorLong_scale_for_intercept,0);
        check_greater_or_equal(function__,"priorEvent_scale",priorEvent_scale,0);
        check_greater_or_equal(function__,"priorEvent_scale_for_intercept",priorEvent_scale_for_intercept,0);
        check_greater_or_equal(function__,"priorAssoc_scale",priorAssoc_scale,0);
        check_greater_or_equal(function__,"priorLong_df",priorLong_df,0);
        check_greater_or_equal(function__,"priorLong_df_for_intercept",priorLong_df_for_intercept,0);
        check_greater_or_equal(function__,"priorEvent_df",priorEvent_df,0);
        check_greater_or_equal(function__,"priorEvent_df_for_intercept",priorEvent_df_for_intercept,0);
        check_greater_or_equal(function__,"priorAssoc_df",priorAssoc_df,0);
        check_greater_or_equal(function__,"priorLong_scale_for_dispersion",priorLong_scale_for_dispersion,0);
        check_greater_or_equal(function__,"priorEvent_scale_for_weibull",priorEvent_scale_for_weibull,0);
        check_greater_or_equal(function__,"shape",shape,0);
        check_greater_or_equal(function__,"scale",scale,0);
        check_greater_or_equal(function__,"len_concentration",len_concentration,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"concentration[k0__]",concentration[k0__],0);
        }
        check_greater_or_equal(function__,"len_regularization",len_regularization,0);
        for (int k0__ = 0; k0__ < len_regularization; ++k0__) {
            check_greater_or_equal(function__,"regularization[k0__]",regularization[k0__],0);
        }
        check_greater_or_equal(function__,"prior_PD",prior_PD,0);
        check_less_or_equal(function__,"prior_PD",prior_PD,1);
        validate_non_negative_index("sqrt_y", "(sum_y_N * logical_gt(any_fam_3,0))", (sum_y_N * logical_gt(any_fam_3,0)));
        sqrt_y = vector_d(static_cast<Eigen::VectorXd::Index>((sum_y_N * logical_gt(any_fam_3,0))));
        validate_non_negative_index("log_y", "(sum_y_N * logical_gt(any_fam_3,0))", (sum_y_N * logical_gt(any_fam_3,0)));
        log_y = vector_d(static_cast<Eigen::VectorXd::Index>((sum_y_N * logical_gt(any_fam_3,0))));
        validate_non_negative_index("sum_log_y", "M", M);
        sum_log_y = std::vector<double>(M,double(0));
        validate_non_negative_index("e_log_times", "nrow_e_Xq", nrow_e_Xq);
        e_log_times = vector_d(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        y_t_any_124 = int(0);
        y_t_all_124 = int(0);
        e_t_any_124 = int(0);
        e_t_all_124 = int(0);
        a_t_any_124 = int(0);
        a_t_all_124 = int(0);
        y_hs = int(0);
        e_hs = int(0);
        a_hs = int(0);
        len_z_T = int(0);
        len_var_group = int(0);
        len_rho = int(0);
        validate_non_negative_index("delta", "len_concentration", len_concentration);
        delta = std::vector<double>(len_concentration,double(0));
        pos = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(sqrt_y,DUMMY_VAR__);
        stan::math::fill(log_y,DUMMY_VAR__);
        stan::math::fill(sum_log_y,DUMMY_VAR__);
        stan::math::fill(e_log_times,DUMMY_VAR__);
        stan::math::fill(y_t_any_124, std::numeric_limits<int>::min());
        stan::math::fill(y_t_all_124, std::numeric_limits<int>::min());
        stan::math::fill(e_t_any_124, std::numeric_limits<int>::min());
        stan::math::fill(e_t_all_124, std::numeric_limits<int>::min());
        stan::math::fill(a_t_any_124, std::numeric_limits<int>::min());
        stan::math::fill(a_t_all_124, std::numeric_limits<int>::min());
        stan::math::fill(y_hs, std::numeric_limits<int>::min());
        stan::math::fill(e_hs, std::numeric_limits<int>::min());
        stan::math::fill(a_hs, std::numeric_limits<int>::min());
        stan::math::fill(len_z_T, std::numeric_limits<int>::min());
        stan::math::fill(len_var_group, std::numeric_limits<int>::min());
        stan::math::fill(len_rho, std::numeric_limits<int>::min());
        stan::math::fill(delta,DUMMY_VAR__);
        stan::math::fill(pos, std::numeric_limits<int>::min());

        try {
            current_statement_begin__ = 714;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 715;
                if (as_bool(logical_eq(get_base1(family,m,"family",1),1))) {
                    current_statement_begin__ = 715;
                    stan::math::assign(get_base1_lhs(sum_log_y,m,"sum_log_y",1), not_a_number());
                } else if (as_bool(logical_eq(get_base1(family,m,"family",1),2))) {
                    current_statement_begin__ = 716;
                    stan::math::assign(get_base1_lhs(sum_log_y,m,"sum_log_y",1), sum(log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(get_base1(y_beg,m,"y_beg",1), get_base1(y_end,m,"y_end",1)), stan::model::nil_index_list()), "y"))));
                } else if (as_bool(logical_eq(get_base1(family,m,"family",1),3))) {
                    current_statement_begin__ = 718;
                    for (int n = 1; n <= sum_y_N; ++n) {
                        current_statement_begin__ = 718;
                        stan::math::assign(get_base1_lhs(sqrt_y,n,"sqrt_y",1), sqrt(get_base1(y,n,"y",1)));
                    }
                    current_statement_begin__ = 719;
                    stan::math::assign(log_y, log(y));
                    current_statement_begin__ = 720;
                    stan::math::assign(get_base1_lhs(sum_log_y,m,"sum_log_y",1), sum(stan::model::rvalue(log_y, stan::model::cons_list(stan::model::index_min_max(get_base1(y_beg,m,"y_beg",1), get_base1(y_end,m,"y_end",1)), stan::model::nil_index_list()), "log_y")));
                }
            }
            current_statement_begin__ = 725;
            stan::math::assign(e_log_times, log(e_times));
            current_statement_begin__ = 728;
            if (as_bool(logical_lte(priorLong_dist,2))) {
                current_statement_begin__ = 728;
                stan::math::assign(y_hs, 0);
            } else if (as_bool(logical_eq(priorLong_dist,3))) {
                current_statement_begin__ = 729;
                stan::math::assign(y_hs, 2);
            } else if (as_bool(logical_eq(priorLong_dist,4))) {
                current_statement_begin__ = 730;
                stan::math::assign(y_hs, 4);
            }
            current_statement_begin__ = 731;
            if (as_bool(logical_eq(priorLong_dist,2))) {
                current_statement_begin__ = 732;
                stan::math::assign(y_t_any_124, 0);
                current_statement_begin__ = 733;
                stan::math::assign(y_t_all_124, 1);
                current_statement_begin__ = 734;
                for (int k = 1; k <= sum_y_K; ++k) {
                    current_statement_begin__ = 735;
                    if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),1)) || primitive_value(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),2)))) || primitive_value(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),4))))) {
                        current_statement_begin__ = 736;
                        stan::math::assign(y_t_any_124, 1);
                    } else {
                        current_statement_begin__ = 737;
                        stan::math::assign(y_t_all_124, 0);
                    }
                }
            } else {
                current_statement_begin__ = 741;
                stan::math::assign(y_t_any_124, 0);
                current_statement_begin__ = 742;
                stan::math::assign(y_t_all_124, 0);
            }
            current_statement_begin__ = 746;
            if (as_bool(logical_lte(priorEvent_dist,2))) {
                current_statement_begin__ = 746;
                stan::math::assign(e_hs, 0);
            } else if (as_bool(logical_eq(priorEvent_dist,3))) {
                current_statement_begin__ = 747;
                stan::math::assign(e_hs, 2);
            } else if (as_bool(logical_eq(priorEvent_dist,4))) {
                current_statement_begin__ = 748;
                stan::math::assign(e_hs, 4);
            }
            current_statement_begin__ = 749;
            if (as_bool(logical_eq(priorEvent_dist,2))) {
                current_statement_begin__ = 750;
                stan::math::assign(e_t_any_124, 0);
                current_statement_begin__ = 751;
                stan::math::assign(e_t_all_124, 1);
                current_statement_begin__ = 752;
                for (int k = 1; k <= e_K; ++k) {
                    current_statement_begin__ = 753;
                    if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),1)) || primitive_value(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),2)))) || primitive_value(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),4))))) {
                        current_statement_begin__ = 754;
                        stan::math::assign(e_t_any_124, 1);
                    } else {
                        current_statement_begin__ = 755;
                        stan::math::assign(e_t_all_124, 0);
                    }
                }
            } else {
                current_statement_begin__ = 759;
                stan::math::assign(e_t_any_124, 0);
                current_statement_begin__ = 760;
                stan::math::assign(e_t_all_124, 0);
            }
            current_statement_begin__ = 764;
            if (as_bool(logical_lte(priorAssoc_dist,2))) {
                current_statement_begin__ = 764;
                stan::math::assign(a_hs, 0);
            } else if (as_bool(logical_eq(priorAssoc_dist,3))) {
                current_statement_begin__ = 765;
                stan::math::assign(a_hs, 2);
            } else if (as_bool(logical_eq(priorAssoc_dist,4))) {
                current_statement_begin__ = 766;
                stan::math::assign(a_hs, 4);
            }
            current_statement_begin__ = 767;
            if (as_bool(logical_eq(priorAssoc_dist,2))) {
                current_statement_begin__ = 768;
                stan::math::assign(a_t_any_124, 0);
                current_statement_begin__ = 769;
                stan::math::assign(a_t_all_124, 1);
                current_statement_begin__ = 770;
                for (int k = 1; k <= a_K; ++k) {
                    current_statement_begin__ = 771;
                    if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),1)) || primitive_value(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),2)))) || primitive_value(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),4))))) {
                        current_statement_begin__ = 772;
                        stan::math::assign(a_t_any_124, 1);
                    } else {
                        current_statement_begin__ = 773;
                        stan::math::assign(a_t_all_124, 0);
                    }
                }
            } else {
                current_statement_begin__ = 777;
                stan::math::assign(a_t_any_124, 0);
                current_statement_begin__ = 778;
                stan::math::assign(a_t_all_124, 0);
            }
            current_statement_begin__ = 782;
            stan::math::assign(len_z_T, 0);
            current_statement_begin__ = 783;
            stan::math::assign(len_var_group, (sum(to_array_1d(p)) * logical_gt(t,0)));
            current_statement_begin__ = 784;
            stan::math::assign(len_rho, (sum(to_array_1d(p)) - t));
            current_statement_begin__ = 785;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 786;
            for (int i = 1; i <= t; ++i) {
                {
                    int p_tmp(0);
                    (void) p_tmp;  // dummy to suppress unused var warning
                    current_statement_begin__ = 788;
                    stan::math::assign(p_tmp, sum(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p")));
                    current_statement_begin__ = 789;
                    if (as_bool(logical_gt(p_tmp,1))) {
                        current_statement_begin__ = 790;
                        for (int j = 1; j <= p_tmp; ++j) {
                            current_statement_begin__ = 791;
                            stan::math::assign(get_base1_lhs(delta,pos,"delta",1), get_base1(concentration,j,"concentration",1));
                            current_statement_begin__ = 792;
                            stan::math::assign(pos, (pos + 1));
                        }
                    }
                    current_statement_begin__ = 795;
                    for (int j = 3; j <= p_tmp; ++j) {
                        current_statement_begin__ = 795;
                        stan::math::assign(len_z_T, ((len_z_T + p_tmp) - 1));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"y_t_any_124",y_t_any_124,0);
        check_less_or_equal(function__,"y_t_any_124",y_t_any_124,1);
        check_greater_or_equal(function__,"y_t_all_124",y_t_all_124,0);
        check_less_or_equal(function__,"y_t_all_124",y_t_all_124,1);
        check_greater_or_equal(function__,"e_t_any_124",e_t_any_124,0);
        check_less_or_equal(function__,"e_t_any_124",e_t_any_124,1);
        check_greater_or_equal(function__,"e_t_all_124",e_t_all_124,0);
        check_less_or_equal(function__,"e_t_all_124",e_t_all_124,1);
        check_greater_or_equal(function__,"a_t_any_124",a_t_any_124,0);
        check_less_or_equal(function__,"a_t_any_124",a_t_any_124,1);
        check_greater_or_equal(function__,"a_t_all_124",a_t_all_124,0);
        check_less_or_equal(function__,"a_t_all_124",a_t_all_124,1);
        check_greater_or_equal(function__,"y_hs",y_hs,0);
        check_greater_or_equal(function__,"e_hs",e_hs,0);
        check_greater_or_equal(function__,"a_hs",a_hs,0);
        check_greater_or_equal(function__,"len_z_T",len_z_T,0);
        check_greater_or_equal(function__,"len_var_group",len_var_group,0);
        check_greater_or_equal(function__,"len_rho",len_rho,0);
        for (int k0__ = 0; k0__ < len_concentration; ++k0__) {
            check_greater_or_equal(function__,"delta[k0__]",delta[k0__],0);
        }
        check_greater_or_equal(function__,"pos",pos,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += sum_y_has_intercept_unbound;
        num_params_r__ += sum_y_has_intercept_bound;
        num_params_r__ += sum_y_K;
        num_params_r__ += M;
        num_params_r__ += e_has_intercept;
        num_params_r__ += e_K;
        num_params_r__ += basehaz_weibull;
        num_params_r__ += a_K;
        num_params_r__ += len_b;
        num_params_r__ += len_z_T;
        num_params_r__ += len_rho;
        num_params_r__ += len_concentration;
        num_params_r__ += t;
        num_params_r__ += y_hs;
        num_params_r__ += (logical_gt(y_hs,0) * sum_y_K) * y_hs;
        num_params_r__ += e_hs;
        num_params_r__ += (logical_gt(e_hs,0) * e_K) * e_hs;
        num_params_r__ += a_hs;
        num_params_r__ += (logical_gt(a_hs,0) * a_K) * a_hs;
    }

    ~model_jm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("y_gamma_unbound")))
            throw std::runtime_error("variable y_gamma_unbound missing");
        vals_r__ = context__.vals_r("y_gamma_unbound");
        pos__ = 0U;
        context__.validate_dims("initialization", "y_gamma_unbound", "double", context__.to_vec(sum_y_has_intercept_unbound));
        std::vector<double> y_gamma_unbound(sum_y_has_intercept_unbound,double(0));
        for (int i0__ = 0U; i0__ < sum_y_has_intercept_unbound; ++i0__)
            y_gamma_unbound[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < sum_y_has_intercept_unbound; ++i0__)
            try {
            writer__.scalar_unconstrain(y_gamma_unbound[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_gamma_unbound: ") + e.what());
        }

        if (!(context__.contains_r("y_gamma_bound")))
            throw std::runtime_error("variable y_gamma_bound missing");
        vals_r__ = context__.vals_r("y_gamma_bound");
        pos__ = 0U;
        context__.validate_dims("initialization", "y_gamma_bound", "double", context__.to_vec(sum_y_has_intercept_bound));
        std::vector<double> y_gamma_bound(sum_y_has_intercept_bound,double(0));
        for (int i0__ = 0U; i0__ < sum_y_has_intercept_bound; ++i0__)
            y_gamma_bound[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < sum_y_has_intercept_bound; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_gamma_bound[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_gamma_bound: ") + e.what());
        }

        if (!(context__.contains_r("y_z_beta")))
            throw std::runtime_error("variable y_z_beta missing");
        vals_r__ = context__.vals_r("y_z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "y_z_beta", "vector_d", context__.to_vec(sum_y_K));
        vector_d y_z_beta(static_cast<Eigen::VectorXd::Index>(sum_y_K));
        for (int j1__ = 0U; j1__ < sum_y_K; ++j1__)
            y_z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(y_z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_z_beta: ") + e.what());
        }

        if (!(context__.contains_r("y_dispersion_unscaled")))
            throw std::runtime_error("variable y_dispersion_unscaled missing");
        vals_r__ = context__.vals_r("y_dispersion_unscaled");
        pos__ = 0U;
        context__.validate_dims("initialization", "y_dispersion_unscaled", "vector_d", context__.to_vec(M));
        vector_d y_dispersion_unscaled(static_cast<Eigen::VectorXd::Index>(M));
        for (int j1__ = 0U; j1__ < M; ++j1__)
            y_dispersion_unscaled(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,y_dispersion_unscaled);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_dispersion_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("e_gamma")))
            throw std::runtime_error("variable e_gamma missing");
        vals_r__ = context__.vals_r("e_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "e_gamma", "double", context__.to_vec(e_has_intercept));
        std::vector<double> e_gamma(e_has_intercept,double(0));
        for (int i0__ = 0U; i0__ < e_has_intercept; ++i0__)
            e_gamma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_has_intercept; ++i0__)
            try {
            writer__.scalar_unconstrain(e_gamma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_gamma: ") + e.what());
        }

        if (!(context__.contains_r("e_z_beta")))
            throw std::runtime_error("variable e_z_beta missing");
        vals_r__ = context__.vals_r("e_z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "e_z_beta", "vector_d", context__.to_vec(e_K));
        vector_d e_z_beta(static_cast<Eigen::VectorXd::Index>(e_K));
        for (int j1__ = 0U; j1__ < e_K; ++j1__)
            e_z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(e_z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_z_beta: ") + e.what());
        }

        if (!(context__.contains_r("weibull_shape_unscaled")))
            throw std::runtime_error("variable weibull_shape_unscaled missing");
        vals_r__ = context__.vals_r("weibull_shape_unscaled");
        pos__ = 0U;
        context__.validate_dims("initialization", "weibull_shape_unscaled", "double", context__.to_vec(basehaz_weibull));
        std::vector<double> weibull_shape_unscaled(basehaz_weibull,double(0));
        for (int i0__ = 0U; i0__ < basehaz_weibull; ++i0__)
            weibull_shape_unscaled[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < basehaz_weibull; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,weibull_shape_unscaled[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable weibull_shape_unscaled: ") + e.what());
        }

        if (!(context__.contains_r("a_z_beta")))
            throw std::runtime_error("variable a_z_beta missing");
        vals_r__ = context__.vals_r("a_z_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "a_z_beta", "vector_d", context__.to_vec(a_K));
        vector_d a_z_beta(static_cast<Eigen::VectorXd::Index>(a_K));
        for (int j1__ = 0U; j1__ < a_K; ++j1__)
            a_z_beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(a_z_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_z_beta: ") + e.what());
        }

        if (!(context__.contains_r("z_b")))
            throw std::runtime_error("variable z_b missing");
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_b", "vector_d", context__.to_vec(len_b));
        vector_d z_b(static_cast<Eigen::VectorXd::Index>(len_b));
        for (int j1__ = 0U; j1__ < len_b; ++j1__)
            z_b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_b: ") + e.what());
        }

        if (!(context__.contains_r("z_T")))
            throw std::runtime_error("variable z_T missing");
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        vector_d z_T(static_cast<Eigen::VectorXd::Index>(len_z_T));
        for (int j1__ = 0U; j1__ < len_z_T; ++j1__)
            z_T(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_T: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "vector_d", context__.to_vec(len_rho));
        vector_d rho(static_cast<Eigen::VectorXd::Index>(len_rho));
        for (int j1__ = 0U; j1__ < len_rho; ++j1__)
            rho(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        vector_d zeta(static_cast<Eigen::VectorXd::Index>(len_concentration));
        for (int j1__ = 0U; j1__ < len_concentration; ++j1__)
            zeta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec(t));
        vector_d tau(static_cast<Eigen::VectorXd::Index>(t));
        for (int j1__ = 0U; j1__ < t; ++j1__)
            tau(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("y_global")))
            throw std::runtime_error("variable y_global missing");
        vals_r__ = context__.vals_r("y_global");
        pos__ = 0U;
        context__.validate_dims("initialization", "y_global", "double", context__.to_vec(y_hs));
        std::vector<double> y_global(y_hs,double(0));
        for (int i0__ = 0U; i0__ < y_hs; ++i0__)
            y_global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < y_hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,y_global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_global: ") + e.what());
        }

        if (!(context__.contains_r("y_local")))
            throw std::runtime_error("variable y_local missing");
        vals_r__ = context__.vals_r("y_local");
        pos__ = 0U;
        context__.validate_dims("initialization", "y_local", "vector_d", context__.to_vec(y_hs,(logical_gt(y_hs,0) * sum_y_K)));
        std::vector<vector_d> y_local(y_hs,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(y_hs,0) * sum_y_K))));
        for (int j1__ = 0U; j1__ < (logical_gt(y_hs,0) * sum_y_K); ++j1__)
            for (int i0__ = 0U; i0__ < y_hs; ++i0__)
                y_local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < y_hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,y_local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y_local: ") + e.what());
        }

        if (!(context__.contains_r("e_global")))
            throw std::runtime_error("variable e_global missing");
        vals_r__ = context__.vals_r("e_global");
        pos__ = 0U;
        context__.validate_dims("initialization", "e_global", "double", context__.to_vec(e_hs));
        std::vector<double> e_global(e_hs,double(0));
        for (int i0__ = 0U; i0__ < e_hs; ++i0__)
            e_global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,e_global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_global: ") + e.what());
        }

        if (!(context__.contains_r("e_local")))
            throw std::runtime_error("variable e_local missing");
        vals_r__ = context__.vals_r("e_local");
        pos__ = 0U;
        context__.validate_dims("initialization", "e_local", "vector_d", context__.to_vec(e_hs,(logical_gt(e_hs,0) * e_K)));
        std::vector<vector_d> e_local(e_hs,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(e_hs,0) * e_K))));
        for (int j1__ = 0U; j1__ < (logical_gt(e_hs,0) * e_K); ++j1__)
            for (int i0__ = 0U; i0__ < e_hs; ++i0__)
                e_local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < e_hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,e_local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable e_local: ") + e.what());
        }

        if (!(context__.contains_r("a_global")))
            throw std::runtime_error("variable a_global missing");
        vals_r__ = context__.vals_r("a_global");
        pos__ = 0U;
        context__.validate_dims("initialization", "a_global", "double", context__.to_vec(a_hs));
        std::vector<double> a_global(a_hs,double(0));
        for (int i0__ = 0U; i0__ < a_hs; ++i0__)
            a_global[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,a_global[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_global: ") + e.what());
        }

        if (!(context__.contains_r("a_local")))
            throw std::runtime_error("variable a_local missing");
        vals_r__ = context__.vals_r("a_local");
        pos__ = 0U;
        context__.validate_dims("initialization", "a_local", "vector_d", context__.to_vec(a_hs,(logical_gt(a_hs,0) * a_K)));
        std::vector<vector_d> a_local(a_hs,vector_d(static_cast<Eigen::VectorXd::Index>((logical_gt(a_hs,0) * a_K))));
        for (int j1__ = 0U; j1__ < (logical_gt(a_hs,0) * a_K); ++j1__)
            for (int i0__ = 0U; i0__ < a_hs; ++i0__)
                a_local[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < a_hs; ++i0__)
            try {
            writer__.vector_lb_unconstrain(0,a_local[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_local: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<T__> y_gamma_unbound;
        size_t dim_y_gamma_unbound_0__ = sum_y_has_intercept_unbound;
        y_gamma_unbound.reserve(dim_y_gamma_unbound_0__);
        for (size_t k_0__ = 0; k_0__ < dim_y_gamma_unbound_0__; ++k_0__) {
            if (jacobian__)
                y_gamma_unbound.push_back(in__.scalar_constrain(lp__));
            else
                y_gamma_unbound.push_back(in__.scalar_constrain());
        }

        vector<T__> y_gamma_bound;
        size_t dim_y_gamma_bound_0__ = sum_y_has_intercept_bound;
        y_gamma_bound.reserve(dim_y_gamma_bound_0__);
        for (size_t k_0__ = 0; k_0__ < dim_y_gamma_bound_0__; ++k_0__) {
            if (jacobian__)
                y_gamma_bound.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                y_gamma_bound.push_back(in__.scalar_lb_constrain(0));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_z_beta;
        (void) y_z_beta;  // dummy to suppress unused var warning
        if (jacobian__)
            y_z_beta = in__.vector_constrain(sum_y_K,lp__);
        else
            y_z_beta = in__.vector_constrain(sum_y_K);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_dispersion_unscaled;
        (void) y_dispersion_unscaled;  // dummy to suppress unused var warning
        if (jacobian__)
            y_dispersion_unscaled = in__.vector_lb_constrain(0,M,lp__);
        else
            y_dispersion_unscaled = in__.vector_lb_constrain(0,M);

        vector<T__> e_gamma;
        size_t dim_e_gamma_0__ = e_has_intercept;
        e_gamma.reserve(dim_e_gamma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_e_gamma_0__; ++k_0__) {
            if (jacobian__)
                e_gamma.push_back(in__.scalar_constrain(lp__));
            else
                e_gamma.push_back(in__.scalar_constrain());
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  e_z_beta;
        (void) e_z_beta;  // dummy to suppress unused var warning
        if (jacobian__)
            e_z_beta = in__.vector_constrain(e_K,lp__);
        else
            e_z_beta = in__.vector_constrain(e_K);

        vector<T__> weibull_shape_unscaled;
        size_t dim_weibull_shape_unscaled_0__ = basehaz_weibull;
        weibull_shape_unscaled.reserve(dim_weibull_shape_unscaled_0__);
        for (size_t k_0__ = 0; k_0__ < dim_weibull_shape_unscaled_0__; ++k_0__) {
            if (jacobian__)
                weibull_shape_unscaled.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                weibull_shape_unscaled.push_back(in__.scalar_lb_constrain(0));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  a_z_beta;
        (void) a_z_beta;  // dummy to suppress unused var warning
        if (jacobian__)
            a_z_beta = in__.vector_constrain(a_K,lp__);
        else
            a_z_beta = in__.vector_constrain(a_K);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_b;
        (void) z_b;  // dummy to suppress unused var warning
        if (jacobian__)
            z_b = in__.vector_constrain(len_b,lp__);
        else
            z_b = in__.vector_constrain(len_b);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_T;
        (void) z_T;  // dummy to suppress unused var warning
        if (jacobian__)
            z_T = in__.vector_constrain(len_z_T,lp__);
        else
            z_T = in__.vector_constrain(len_z_T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  rho;
        (void) rho;  // dummy to suppress unused var warning
        if (jacobian__)
            rho = in__.vector_lub_constrain(0,1,len_rho,lp__);
        else
            rho = in__.vector_lub_constrain(0,1,len_rho);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  zeta;
        (void) zeta;  // dummy to suppress unused var warning
        if (jacobian__)
            zeta = in__.vector_lb_constrain(0,len_concentration,lp__);
        else
            zeta = in__.vector_lb_constrain(0,len_concentration);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  tau;
        (void) tau;  // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.vector_lb_constrain(0,t,lp__);
        else
            tau = in__.vector_lb_constrain(0,t);

        vector<T__> y_global;
        size_t dim_y_global_0__ = y_hs;
        y_global.reserve(dim_y_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_y_global_0__; ++k_0__) {
            if (jacobian__)
                y_global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                y_global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > y_local;
        size_t dim_y_local_0__ = y_hs;
        y_local.reserve(dim_y_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_y_local_0__; ++k_0__) {
            if (jacobian__)
                y_local.push_back(in__.vector_lb_constrain(0,(logical_gt(y_hs,0) * sum_y_K),lp__));
            else
                y_local.push_back(in__.vector_lb_constrain(0,(logical_gt(y_hs,0) * sum_y_K)));
        }

        vector<T__> e_global;
        size_t dim_e_global_0__ = e_hs;
        e_global.reserve(dim_e_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_e_global_0__; ++k_0__) {
            if (jacobian__)
                e_global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                e_global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > e_local;
        size_t dim_e_local_0__ = e_hs;
        e_local.reserve(dim_e_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_e_local_0__; ++k_0__) {
            if (jacobian__)
                e_local.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs,0) * e_K),lp__));
            else
                e_local.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs,0) * e_K)));
        }

        vector<T__> a_global;
        size_t dim_a_global_0__ = a_hs;
        a_global.reserve(dim_a_global_0__);
        for (size_t k_0__ = 0; k_0__ < dim_a_global_0__; ++k_0__) {
            if (jacobian__)
                a_global.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                a_global.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > a_local;
        size_t dim_a_local_0__ = a_hs;
        a_local.reserve(dim_a_local_0__);
        for (size_t k_0__ = 0; k_0__ < dim_a_local_0__; ++k_0__) {
            if (jacobian__)
                a_local.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs,0) * a_K),lp__));
            else
                a_local.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs,0) * a_K)));
        }


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_beta(static_cast<Eigen::VectorXd::Index>(sum_y_K));
        (void) y_beta;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_dispersion(static_cast<Eigen::VectorXd::Index>(M));
        (void) y_dispersion;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  e_beta(static_cast<Eigen::VectorXd::Index>(e_K));
        (void) e_beta;  // dummy to suppress unused var warning
        vector<T__> weibull_shape(basehaz_weibull);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_eta_q(static_cast<Eigen::VectorXd::Index>((M * nrow_y_Xq)));
        (void) y_eta_q;  // dummy to suppress unused var warning
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > ysep_eta_q(M, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nrow_y_Xq))));
        Eigen::Matrix<T__,Eigen::Dynamic,1>  e_eta_q(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        (void) e_eta_q;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  ll_haz_q(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        (void) ll_haz_q;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  ll_haz_eventtime(static_cast<Eigen::VectorXd::Index>(Npat));
        (void) ll_haz_eventtime;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  ll_haz_quadtime(static_cast<Eigen::VectorXd::Index>(Npat_times_quadnodes));
        (void) ll_haz_quadtime;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  ll_surv_eventtime(static_cast<Eigen::VectorXd::Index>(Npat_times_quadnodes));
        (void) ll_surv_eventtime;  // dummy to suppress unused var warning
        T__ sum_ll_haz_eventtime;
        (void) sum_ll_haz_eventtime;  // dummy to suppress unused var warning
        T__ sum_ll_surv_eventtime;
        (void) sum_ll_surv_eventtime;  // dummy to suppress unused var warning
        T__ ll_event;
        (void) ll_event;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  a_beta(static_cast<Eigen::VectorXd::Index>(a_K));
        (void) a_beta;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
        (void) theta_L;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(len_b));
        (void) b;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b_by_model(static_cast<Eigen::VectorXd::Index>(len_b));
        (void) b_by_model;  // dummy to suppress unused var warning

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(y_beta,DUMMY_VAR__);
        stan::math::fill(y_dispersion,DUMMY_VAR__);
        stan::math::fill(e_beta,DUMMY_VAR__);
        stan::math::fill(weibull_shape,DUMMY_VAR__);
        stan::math::fill(y_eta_q,DUMMY_VAR__);
        stan::math::fill(ysep_eta_q,DUMMY_VAR__);
        stan::math::fill(e_eta_q,DUMMY_VAR__);
        stan::math::fill(ll_haz_q,DUMMY_VAR__);
        stan::math::fill(ll_haz_eventtime,DUMMY_VAR__);
        stan::math::fill(ll_haz_quadtime,DUMMY_VAR__);
        stan::math::fill(ll_surv_eventtime,DUMMY_VAR__);
        stan::math::fill(sum_ll_haz_eventtime,DUMMY_VAR__);
        stan::math::fill(sum_ll_surv_eventtime,DUMMY_VAR__);
        stan::math::fill(ll_event,DUMMY_VAR__);
        stan::math::fill(a_beta,DUMMY_VAR__);
        stan::math::fill(theta_L,DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        stan::math::fill(b_by_model,DUMMY_VAR__);

        try {
            current_statement_begin__ = 860;
            if (as_bool(logical_eq(priorLong_dist,0))) {
                current_statement_begin__ = 860;
                stan::math::assign(y_beta, y_z_beta);
            } else if (as_bool(logical_eq(priorLong_dist,1))) {
                current_statement_begin__ = 861;
                stan::math::assign(y_beta, add(elt_multiply(y_z_beta,priorLong_scale),priorLong_mean));
            } else if (as_bool(logical_eq(priorLong_dist,2))) {
                current_statement_begin__ = 862;
                for (int k = 1; k <= sum_y_K; ++k) {
                    {
                        T__ P;
                        (void) P;  // dummy to suppress unused var warning
                        stan::math::initialize(P, DUMMY_VAR__);
                        current_statement_begin__ = 864;
                        if (as_bool(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),1))) {
                            current_statement_begin__ = 865;
                            stan::math::assign(P, Phi(get_base1(y_z_beta,k,"y_z_beta",1)));
                            current_statement_begin__ = 866;
                            stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), tan((pi() * (P - 0.5))));
                        } else if (as_bool(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),2))) {
                            current_statement_begin__ = 869;
                            stan::math::assign(P, Phi(get_base1(y_z_beta,k,"y_z_beta",1)));
                            current_statement_begin__ = 870;
                            stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), ((2 * (P - 0.5)) / sqrt(((2.0 * P) * (1 - P)))));
                        } else if (as_bool(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),4))) {
                            {
                                T__ q_a;
                                (void) q_a;  // dummy to suppress unused var warning
                                stan::math::initialize(q_a, DUMMY_VAR__);
                                current_statement_begin__ = 874;
                                stan::math::assign(P, Phi(get_base1(y_z_beta,k,"y_z_beta",1)));
                                current_statement_begin__ = 875;
                                stan::math::assign(q_a, sqrt(((4.0 * P) * (1 - P))));
                                current_statement_begin__ = 876;
                                stan::math::assign(q_a, (cos((acos(q_a) / 3)) / q_a));
                                current_statement_begin__ = 877;
                                stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), (2 * sqrt((q_a - 1))));
                                current_statement_begin__ = 878;
                                if (as_bool(logical_lt(P,0.5))) {
                                    current_statement_begin__ = 878;
                                    stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), -(get_base1(y_beta,k,"y_beta",1)));
                                }
                            }
                        } else {
                            current_statement_begin__ = 880;
                            stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), get_base1(y_z_beta,k,"y_z_beta",1));
                        }
                        current_statement_begin__ = 881;
                        stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), ((get_base1(y_beta,k,"y_beta",1) * get_base1(priorLong_scale,k,"priorLong_scale",1)) + get_base1(priorLong_mean,k,"priorLong_mean",1)));
                    }
                }
            } else if (as_bool(logical_eq(priorLong_dist,3))) {
                current_statement_begin__ = 883;
                stan::math::assign(y_beta, hs_prior(y_z_beta,y_global,y_local, pstream__));
            } else if (as_bool(logical_eq(priorLong_dist,4))) {
                current_statement_begin__ = 884;
                stan::math::assign(y_beta, hsplus_prior(y_z_beta,y_global,y_local, pstream__));
            }
            current_statement_begin__ = 886;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 887;
                if (as_bool(logical_gt(get_base1(priorLong_scale_for_dispersion,m,"priorLong_scale_for_dispersion",1),0))) {
                    current_statement_begin__ = 888;
                    stan::math::assign(get_base1_lhs(y_dispersion,m,"y_dispersion",1), (get_base1(priorLong_scale_for_dispersion,m,"priorLong_scale_for_dispersion",1) * get_base1(y_dispersion_unscaled,m,"y_dispersion_unscaled",1)));
                } else {
                    current_statement_begin__ = 889;
                    stan::math::assign(get_base1_lhs(y_dispersion,m,"y_dispersion",1), get_base1(y_dispersion_unscaled,m,"y_dispersion_unscaled",1));
                }
            }
            current_statement_begin__ = 893;
            if (as_bool(logical_eq(priorEvent_dist,0))) {
                current_statement_begin__ = 893;
                stan::math::assign(e_beta, e_z_beta);
            } else if (as_bool(logical_eq(priorEvent_dist,1))) {
                current_statement_begin__ = 894;
                stan::math::assign(e_beta, add(elt_multiply(e_z_beta,priorEvent_scale),priorEvent_mean));
            } else if (as_bool(logical_eq(priorEvent_dist,2))) {
                current_statement_begin__ = 895;
                for (int k = 1; k <= e_K; ++k) {
                    {
                        T__ P;
                        (void) P;  // dummy to suppress unused var warning
                        stan::math::initialize(P, DUMMY_VAR__);
                        current_statement_begin__ = 897;
                        if (as_bool(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),1))) {
                            current_statement_begin__ = 898;
                            stan::math::assign(P, Phi(get_base1(e_z_beta,k,"e_z_beta",1)));
                            current_statement_begin__ = 899;
                            stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), tan((pi() * (P - 0.5))));
                        } else if (as_bool(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),2))) {
                            current_statement_begin__ = 902;
                            stan::math::assign(P, Phi(get_base1(e_z_beta,k,"e_z_beta",1)));
                            current_statement_begin__ = 903;
                            stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), ((2 * (P - 0.5)) / sqrt(((2.0 * P) * (1 - P)))));
                        } else if (as_bool(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),4))) {
                            {
                                T__ q_a;
                                (void) q_a;  // dummy to suppress unused var warning
                                stan::math::initialize(q_a, DUMMY_VAR__);
                                current_statement_begin__ = 907;
                                stan::math::assign(P, Phi(get_base1(e_z_beta,k,"e_z_beta",1)));
                                current_statement_begin__ = 908;
                                stan::math::assign(q_a, sqrt(((4.0 * P) * (1 - P))));
                                current_statement_begin__ = 909;
                                stan::math::assign(q_a, (cos((acos(q_a) / 3)) / q_a));
                                current_statement_begin__ = 910;
                                stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), (2 * sqrt((q_a - 1))));
                                current_statement_begin__ = 911;
                                if (as_bool(logical_lt(P,0.5))) {
                                    current_statement_begin__ = 911;
                                    stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), -(get_base1(e_beta,k,"e_beta",1)));
                                }
                            }
                        } else {
                            current_statement_begin__ = 913;
                            stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), get_base1(e_z_beta,k,"e_z_beta",1));
                        }
                        current_statement_begin__ = 914;
                        stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), ((get_base1(e_beta,k,"e_beta",1) * get_base1(priorEvent_scale,k,"priorEvent_scale",1)) + get_base1(priorEvent_mean,k,"priorEvent_mean",1)));
                    }
                }
            } else if (as_bool(logical_eq(priorEvent_dist,3))) {
                current_statement_begin__ = 916;
                stan::math::assign(e_beta, hs_prior(e_z_beta,e_global,e_local, pstream__));
            } else if (as_bool(logical_eq(priorEvent_dist,4))) {
                current_statement_begin__ = 917;
                stan::math::assign(e_beta, hsplus_prior(e_z_beta,e_global,e_local, pstream__));
            }
            current_statement_begin__ = 919;
            if (as_bool(logical_gt(priorEvent_scale_for_weibull,0))) {
                current_statement_begin__ = 920;
                stan::math::assign(get_base1_lhs(weibull_shape,1,"weibull_shape",1), (priorEvent_scale_for_weibull * get_base1(weibull_shape_unscaled,1,"weibull_shape_unscaled",1)));
            } else {
                current_statement_begin__ = 921;
                stan::math::assign(weibull_shape, weibull_shape_unscaled);
            }
            current_statement_begin__ = 924;
            if (as_bool(logical_eq(priorAssoc_dist,0))) {
                current_statement_begin__ = 924;
                stan::math::assign(a_beta, a_z_beta);
            } else if (as_bool(logical_eq(priorAssoc_dist,1))) {
                current_statement_begin__ = 925;
                stan::math::assign(a_beta, add(elt_multiply(a_z_beta,priorAssoc_scale),priorAssoc_mean));
            } else if (as_bool(logical_eq(priorAssoc_dist,2))) {
                current_statement_begin__ = 926;
                for (int k = 1; k <= a_K; ++k) {
                    {
                        T__ P;
                        (void) P;  // dummy to suppress unused var warning
                        stan::math::initialize(P, DUMMY_VAR__);
                        current_statement_begin__ = 928;
                        if (as_bool(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),1))) {
                            current_statement_begin__ = 929;
                            stan::math::assign(P, Phi(get_base1(a_z_beta,k,"a_z_beta",1)));
                            current_statement_begin__ = 930;
                            stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), tan((pi() * (P - 0.5))));
                        } else if (as_bool(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),2))) {
                            current_statement_begin__ = 933;
                            stan::math::assign(P, Phi(get_base1(a_z_beta,k,"a_z_beta",1)));
                            current_statement_begin__ = 934;
                            stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), ((2 * (P - 0.5)) / sqrt(((2.0 * P) * (1 - P)))));
                        } else if (as_bool(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),4))) {
                            {
                                T__ q_a;
                                (void) q_a;  // dummy to suppress unused var warning
                                stan::math::initialize(q_a, DUMMY_VAR__);
                                current_statement_begin__ = 938;
                                stan::math::assign(P, Phi(get_base1(a_z_beta,k,"a_z_beta",1)));
                                current_statement_begin__ = 939;
                                stan::math::assign(q_a, sqrt(((4.0 * P) * (1 - P))));
                                current_statement_begin__ = 940;
                                stan::math::assign(q_a, (cos((acos(q_a) / 3)) / q_a));
                                current_statement_begin__ = 941;
                                stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), (2 * sqrt((q_a - 1))));
                                current_statement_begin__ = 942;
                                if (as_bool(logical_lt(P,0.5))) {
                                    current_statement_begin__ = 942;
                                    stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), -(get_base1(a_beta,k,"a_beta",1)));
                                }
                            }
                        } else {
                            current_statement_begin__ = 944;
                            stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), get_base1(a_z_beta,k,"a_z_beta",1));
                        }
                        current_statement_begin__ = 945;
                        stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), ((get_base1(a_beta,k,"a_beta",1) * get_base1(priorAssoc_scale,k,"priorAssoc_scale",1)) + get_base1(priorAssoc_mean,k,"priorAssoc_mean",1)));
                    }
                }
            } else if (as_bool(logical_eq(priorAssoc_dist,3))) {
                current_statement_begin__ = 947;
                stan::math::assign(a_beta, hs_prior(a_z_beta,a_global,a_local, pstream__));
            } else if (as_bool(logical_eq(priorAssoc_dist,4))) {
                current_statement_begin__ = 948;
                stan::math::assign(a_beta, hsplus_prior(a_z_beta,a_global,a_local, pstream__));
            }
            current_statement_begin__ = 951;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 953;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 954;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
                current_statement_begin__ = 955;
                if (as_bool(logical_gt(M,1))) {
                    current_statement_begin__ = 955;
                    stan::math::assign(b_by_model, reorder_b(b,p,q,l,M, pstream__));
                } else {
                    current_statement_begin__ = 956;
                    stan::math::assign(b_by_model, b);
                }
            }
            current_statement_begin__ = 964;
            if (as_bool(logical_gt(sum_y_K,0))) {
                current_statement_begin__ = 964;
                stan::math::assign(y_eta_q, multiply(y_Xq,y_beta));
            } else {
                current_statement_begin__ = 965;
                stan::math::assign(y_eta_q, rep_vector(0.0,(M * nrow_y_Xq)));
            }
            current_statement_begin__ = 967;
            stan::math::assign(y_eta_q, add(y_eta_q,csr_matrix_times_vector((M * nrow_y_Xq),len_b,w_Zq,v_Zq,u_Zq,b_by_model)));
            current_statement_begin__ = 968;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 969;
                stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), segment(y_eta_q,(((m - 1) * nrow_y_Xq) + 1),nrow_y_Xq));
                current_statement_begin__ = 970;
                if (as_bool(logical_eq(get_base1(y_has_intercept,m,"y_has_intercept",1),1))) {
                    current_statement_begin__ = 971;
                    if (as_bool(logical_eq(get_base1(y_has_intercept_unbound,m,"y_has_intercept_unbound",1),1))) {
                        current_statement_begin__ = 972;
                        stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), add(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(y_gamma_unbound,sum(stan::model::rvalue(y_has_intercept_unbound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_unbound")),"y_gamma_unbound",1)));
                    } else {
                        current_statement_begin__ = 975;
                        stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), add(subtract(get_base1(ysep_eta_q,m,"ysep_eta_q",1),min(get_base1(ysep_eta_q,m,"ysep_eta_q",1))),get_base1(y_gamma_bound,sum(stan::model::rvalue(y_has_intercept_bound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_bound")),"y_gamma_bound",1)));
                    }
                } else if (as_bool(logical_eq(y_centre,1))) {
                    {
                        int mark_beg(0);
                        (void) mark_beg;  // dummy to suppress unused var warning
                        int mark_end(0);
                        (void) mark_end;  // dummy to suppress unused var warning
                        current_statement_begin__ = 981;
                        if (as_bool(logical_eq(m,1))) {
                            current_statement_begin__ = 981;
                            stan::math::assign(mark_beg, 1);
                        } else {
                            current_statement_begin__ = 982;
                            stan::math::assign(mark_beg, (sum(stan::model::rvalue(y_K, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "y_K")) + 1));
                        }
                        current_statement_begin__ = 983;
                        stan::math::assign(mark_end, sum(stan::model::rvalue(y_K, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_K")));
                        current_statement_begin__ = 985;
                        stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), add(get_base1(ysep_eta_q,m,"ysep_eta_q",1),dot_product(stan::model::rvalue(y_xbar, stan::model::cons_list(stan::model::index_min_max(mark_beg, mark_end), stan::model::nil_index_list()), "y_xbar"),stan::model::rvalue(y_beta, stan::model::cons_list(stan::model::index_min_max(mark_beg, mark_end), stan::model::nil_index_list()), "y_beta"))));
                    }
                }
            }
            current_statement_begin__ = 991;
            if (as_bool(logical_gt(e_K,0))) {
                current_statement_begin__ = 991;
                stan::math::assign(e_eta_q, multiply(e_Xq,e_beta));
            } else {
                current_statement_begin__ = 992;
                stan::math::assign(e_eta_q, rep_vector(0.0,nrow_e_Xq));
            }
            current_statement_begin__ = 993;
            if (as_bool(logical_eq(e_has_intercept,1))) {
                current_statement_begin__ = 994;
                stan::math::assign(e_eta_q, add(e_eta_q,get_base1(e_gamma,1,"e_gamma",1)));
            } else if (as_bool(logical_eq(e_centre,1))) {
                current_statement_begin__ = 998;
                stan::math::assign(e_eta_q, add(e_eta_q,dot_product(e_xbar,e_beta)));
            }
            current_statement_begin__ = 1000;
            if (as_bool(logical_eq(assoc,1))) {
                {
                    int mark(0);
                    (void) mark;  // dummy to suppress unused var warning
                    current_statement_begin__ = 1002;
                    stan::math::assign(mark, 0);
                    current_statement_begin__ = 1003;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 1004;
                        if (as_bool(logical_eq(get_base1(has_assoc_ev,m,"has_assoc_ev",1),1))) {
                            current_statement_begin__ = 1005;
                            stan::math::assign(mark, (mark + 1));
                            current_statement_begin__ = 1006;
                            stan::math::assign(e_eta_q, add(e_eta_q,multiply(get_base1(a_beta,mark,"a_beta",1),get_base1(ysep_eta_q,m,"ysep_eta_q",1))));
                        }
                        current_statement_begin__ = 1008;
                        if (as_bool(logical_eq(get_base1(has_assoc_es,m,"has_assoc_es",1),1))) {
                            current_statement_begin__ = 1009;
                            stan::math::assign(mark, (mark + 1));
                        }
                        current_statement_begin__ = 1013;
                        if (as_bool(logical_eq(get_base1(has_assoc_cv,m,"has_assoc_cv",1),1))) {
                            {
                                Eigen::Matrix<T__,Eigen::Dynamic,1>  y_q(static_cast<Eigen::VectorXd::Index>(nrow_y_Xq));
                                (void) y_q;  // dummy to suppress unused var warning
                                stan::math::initialize(y_q, DUMMY_VAR__);
                                current_statement_begin__ = 1015;
                                stan::math::assign(mark, (mark + 1));
                                current_statement_begin__ = 1016;
                                if (as_bool(logical_eq(get_base1(family,m,"family",1),1))) {
                                    current_statement_begin__ = 1017;
                                    stan::math::assign(y_q, linkinv_gauss(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(link,m,"link",1), pstream__));
                                } else if (as_bool(logical_eq(get_base1(family,m,"family",1),2))) {
                                    current_statement_begin__ = 1019;
                                    stan::math::assign(y_q, linkinv_gamma(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(link,m,"link",1), pstream__));
                                } else if (as_bool(logical_eq(get_base1(family,m,"family",1),3))) {
                                    current_statement_begin__ = 1021;
                                    stan::math::assign(y_q, linkinv_inv_gaussian(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(link,m,"link",1), pstream__));
                                }
                                current_statement_begin__ = 1022;
                                stan::math::assign(e_eta_q, add(e_eta_q,multiply(get_base1(a_beta,mark,"a_beta",1),y_q)));
                            }
                        }
                        current_statement_begin__ = 1024;
                        if (as_bool(logical_eq(get_base1(has_assoc_cs,m,"has_assoc_cs",1),1))) {
                            current_statement_begin__ = 1025;
                            stan::math::assign(mark, (mark + 1));
                        }
                    }
                }
            }
            current_statement_begin__ = 1043;
            stan::math::assign(ll_haz_q, elt_multiply(e_d,add(add(log(get_base1(weibull_shape,1,"weibull_shape",1)),multiply((get_base1(weibull_shape,1,"weibull_shape",1) - 1),e_log_times)),e_eta_q)));
            current_statement_begin__ = 1046;
            stan::math::assign(ll_haz_eventtime, segment(ll_haz_q,1,Npat));
            current_statement_begin__ = 1047;
            stan::math::assign(ll_haz_quadtime, segment(ll_haz_q,(Npat + 1),Npat_times_quadnodes));
            current_statement_begin__ = 1051;
            stan::math::assign(ll_surv_eventtime, elt_multiply(quadweight_times_half_eventtime,exp(ll_haz_quadtime)));
            current_statement_begin__ = 1054;
            stan::math::assign(sum_ll_haz_eventtime, sum(ll_haz_eventtime));
            current_statement_begin__ = 1055;
            stan::math::assign(sum_ll_surv_eventtime, sum(ll_surv_eventtime));
            current_statement_begin__ = 1056;
            stan::math::assign(ll_event, (sum_ll_haz_eventtime - sum_ll_surv_eventtime));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < sum_y_K; ++i0__) {
            if (stan::math::is_uninitialized(y_beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: y_beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < M; ++i0__) {
            if (stan::math::is_uninitialized(y_dispersion(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: y_dispersion" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < e_K; ++i0__) {
            if (stan::math::is_uninitialized(e_beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: e_beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < basehaz_weibull; ++i0__) {
            if (stan::math::is_uninitialized(weibull_shape[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: weibull_shape" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < (M * nrow_y_Xq); ++i0__) {
            if (stan::math::is_uninitialized(y_eta_q(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: y_eta_q" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < M; ++i0__) {
            for (int i1__ = 0; i1__ < nrow_y_Xq; ++i1__) {
                if (stan::math::is_uninitialized(ysep_eta_q[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ysep_eta_q" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < nrow_e_Xq; ++i0__) {
            if (stan::math::is_uninitialized(e_eta_q(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: e_eta_q" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < nrow_e_Xq; ++i0__) {
            if (stan::math::is_uninitialized(ll_haz_q(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ll_haz_q" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Npat; ++i0__) {
            if (stan::math::is_uninitialized(ll_haz_eventtime(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ll_haz_eventtime" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Npat_times_quadnodes; ++i0__) {
            if (stan::math::is_uninitialized(ll_haz_quadtime(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ll_haz_quadtime" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Npat_times_quadnodes; ++i0__) {
            if (stan::math::is_uninitialized(ll_surv_eventtime(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ll_surv_eventtime" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        if (stan::math::is_uninitialized(sum_ll_haz_eventtime)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: sum_ll_haz_eventtime";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(sum_ll_surv_eventtime)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: sum_ll_surv_eventtime";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(ll_event)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: ll_event";
            throw std::runtime_error(msg__.str());
        }
        for (int i0__ = 0; i0__ < a_K; ++i0__) {
            if (stan::math::is_uninitialized(a_beta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: a_beta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_theta_L; ++i0__) {
            if (stan::math::is_uninitialized(theta_L(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: theta_L" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_b; ++i0__) {
            if (stan::math::is_uninitialized(b(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < len_b; ++i0__) {
            if (stan::math::is_uninitialized(b_by_model(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b_by_model" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  y_eta(static_cast<Eigen::VectorXd::Index>(sum_y_N));
                (void) y_eta;  // dummy to suppress unused var warning
                stan::math::initialize(y_eta, DUMMY_VAR__);
                current_statement_begin__ = 1063;
                if (as_bool(logical_gt(sum_y_K,0))) {
                    current_statement_begin__ = 1063;
                    stan::math::assign(y_eta, multiply(y_X,y_beta));
                } else {
                    current_statement_begin__ = 1064;
                    stan::math::assign(y_eta, rep_vector(0.0,sum_y_N));
                }
                current_statement_begin__ = 1066;
                stan::math::assign(y_eta, add(y_eta,csr_matrix_times_vector(sum_y_N,len_b,w,v,u,b_by_model)));
                current_statement_begin__ = 1067;
                for (int m = 1; m <= M; ++m) {
                    {
                        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_eta_temp(static_cast<Eigen::VectorXd::Index>(get_base1(y_N,m,"y_N",1)));
                        (void) y_eta_temp;  // dummy to suppress unused var warning
                        stan::math::initialize(y_eta_temp, DUMMY_VAR__);
                        current_statement_begin__ = 1069;
                        stan::math::assign(y_eta_temp, stan::model::rvalue(y_eta, stan::model::cons_list(stan::model::index_min_max(get_base1(y_beg,m,"y_beg",1), get_base1(y_end,m,"y_end",1)), stan::model::nil_index_list()), "y_eta"));
                        current_statement_begin__ = 1070;
                        if (as_bool(logical_eq(get_base1(y_has_intercept,m,"y_has_intercept",1),1))) {
                            current_statement_begin__ = 1071;
                            if (as_bool(logical_eq(get_base1(y_has_intercept_unbound,m,"y_has_intercept_unbound",1),1))) {
                                current_statement_begin__ = 1072;
                                stan::math::assign(y_eta_temp, add(y_eta_temp,get_base1(y_gamma_unbound,sum(stan::model::rvalue(y_has_intercept_unbound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_unbound")),"y_gamma_unbound",1)));
                            } else {
                                current_statement_begin__ = 1075;
                                stan::math::assign(y_eta_temp, add(subtract(y_eta_temp,min(y_eta_temp)),get_base1(y_gamma_bound,sum(stan::model::rvalue(y_has_intercept_bound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_bound")),"y_gamma_bound",1)));
                            }
                        } else if (as_bool(logical_eq(y_centre,1))) {
                            {
                                int mark_beg(0);
                                (void) mark_beg;  // dummy to suppress unused var warning
                                int mark_end(0);
                                (void) mark_end;  // dummy to suppress unused var warning
                                current_statement_begin__ = 1081;
                                if (as_bool(logical_eq(m,1))) {
                                    current_statement_begin__ = 1081;
                                    stan::math::assign(mark_beg, 1);
                                } else {
                                    current_statement_begin__ = 1082;
                                    stan::math::assign(mark_beg, (sum(stan::model::rvalue(y_K, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "y_K")) + 1));
                                }
                                current_statement_begin__ = 1083;
                                stan::math::assign(mark_end, sum(stan::model::rvalue(y_K, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_K")));
                                current_statement_begin__ = 1085;
                                stan::math::assign(y_eta_temp, add(y_eta_temp,dot_product(stan::model::rvalue(y_xbar, stan::model::cons_list(stan::model::index_min_max(mark_beg, mark_end), stan::model::nil_index_list()), "y_xbar"),stan::model::rvalue(y_beta, stan::model::cons_list(stan::model::index_min_max(mark_beg, mark_end), stan::model::nil_index_list()), "y_beta"))));
                            }
                        }
                        current_statement_begin__ = 1090;
                        if (as_bool(logical_eq(prior_PD,0))) {
                            current_statement_begin__ = 1091;
                            if (as_bool(logical_eq(get_base1(family,m,"family",1),1))) {
                                current_statement_begin__ = 1092;
                                if (as_bool(logical_eq(get_base1(link,m,"link",1),1))) {
                                    current_statement_begin__ = 1093;
                                    lp_accum__.add(normal_log<propto__>(segment(y,get_base1(y_beg,m,"y_beg",1),get_base1(y_N,m,"y_N",1)), y_eta_temp, get_base1(y_dispersion,m,"y_dispersion",1)));
                                } else if (as_bool(logical_eq(get_base1(link,m,"link",1),2))) {
                                    current_statement_begin__ = 1095;
                                    lp_accum__.add(lognormal_log<propto__>(segment(y,get_base1(y_beg,m,"y_beg",1),get_base1(y_N,m,"y_N",1)), y_eta_temp, get_base1(y_dispersion,m,"y_dispersion",1)));
                                } else {
                                    current_statement_begin__ = 1097;
                                    lp_accum__.add(normal_log<propto__>(segment(y,get_base1(y_beg,m,"y_beg",1),get_base1(y_N,m,"y_N",1)), divide_real_by_vector(1,y_eta_temp, pstream__), get_base1(y_dispersion,m,"y_dispersion",1)));
                                }
                            } else if (as_bool(logical_eq(get_base1(family,m,"family",1),2))) {
                                current_statement_begin__ = 1102;
                                lp_accum__.add(GammaReg_log<propto__>(segment(y,get_base1(y_beg,m,"y_beg",1),get_base1(y_N,m,"y_N",1)), y_eta_temp, get_base1(y_dispersion,m,"y_dispersion",1), get_base1(link,m,"link",1), get_base1(sum_log_y,m,"sum_log_y",1), pstream__));
                            } else {
                                current_statement_begin__ = 1106;
                                lp_accum__.add(inv_gaussian_log<propto__>(segment(y,get_base1(y_beg,m,"y_beg",1),get_base1(y_N,m,"y_N",1)), linkinv_inv_gaussian(y_eta_temp,get_base1(link,m,"link",1), pstream__), get_base1(y_dispersion,m,"y_dispersion",1), get_base1(sum_log_y,m,"sum_log_y",1), stan::model::rvalue(sqrt_y, stan::model::cons_list(stan::model::index_min_max(get_base1(y_beg,m,"y_beg",1), get_base1(y_end,m,"y_end",1)), stan::model::nil_index_list()), "sqrt_y"), pstream__));
                            }
                        } else if (as_bool(logical_eq(prior_PD,0))) {
                        }
                    }
                }
                current_statement_begin__ = 1116;
                if (as_bool(logical_eq(prior_PD,0))) {
                    current_statement_begin__ = 1116;
                    lp_accum__.add(ll_event);
                }
                current_statement_begin__ = 1119;
                if (as_bool(logical_eq(priorLong_dist,1))) {
                    current_statement_begin__ = 1119;
                    lp_accum__.add(normal_log<propto__>(y_z_beta, 0, 1));
                } else if (as_bool(logical_eq(priorLong_dist,2))) {
                    current_statement_begin__ = 1121;
                    if (as_bool(y_t_all_124)) {
                        current_statement_begin__ = 1121;
                        lp_accum__.add(normal_log<propto__>(y_z_beta, 0, 1));
                    } else if (as_bool(y_t_any_124)) {
                        current_statement_begin__ = 1122;
                        for (int k = 1; k <= sum_y_K; ++k) {
                            current_statement_begin__ = 1123;
                            if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),1)) || primitive_value(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),2)))) || primitive_value(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),4))))) {
                                current_statement_begin__ = 1124;
                                lp_accum__.add(normal_log<propto__>(get_base1(y_z_beta,k,"y_z_beta",1), 0, 1));
                            } else {
                                current_statement_begin__ = 1125;
                                lp_accum__.add(student_t_log<propto__>(get_base1(y_z_beta,k,"y_z_beta",1), get_base1(priorLong_df,k,"priorLong_df",1), 0, 1));
                            }
                        }
                    } else {
                        current_statement_begin__ = 1127;
                        lp_accum__.add(student_t_log<propto__>(y_z_beta, priorLong_df, 0, 1));
                    }
                } else if (as_bool(logical_eq(priorLong_dist,3))) {
                    current_statement_begin__ = 1130;
                    lp_accum__.add(normal_log<propto__>(y_z_beta, 0, 1));
                    current_statement_begin__ = 1131;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_local,1,"y_local",1), 0, 1));
                    current_statement_begin__ = 1132;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(y_local,2,"y_local",1), multiply(0.5,priorLong_df), multiply(0.5,priorLong_df)));
                    current_statement_begin__ = 1133;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_global,1,"y_global",1), 0, 1));
                    current_statement_begin__ = 1134;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(y_global,2,"y_global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(priorLong_dist,4))) {
                    current_statement_begin__ = 1137;
                    lp_accum__.add(normal_log<propto__>(y_z_beta, 0, 1));
                    current_statement_begin__ = 1138;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_local,1,"y_local",1), 0, 1));
                    current_statement_begin__ = 1139;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(y_local,2,"y_local",1), multiply(0.5,priorLong_df), multiply(0.5,priorLong_df)));
                    current_statement_begin__ = 1140;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_local,3,"y_local",1), 0, 1));
                    current_statement_begin__ = 1142;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(y_local,4,"y_local",1), multiply(0.5,priorLong_scale), multiply(0.5,priorLong_scale)));
                    current_statement_begin__ = 1143;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_global,1,"y_global",1), 0, 1));
                    current_statement_begin__ = 1144;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(y_global,2,"y_global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 1149;
                for (int m = 1; m <= M; ++m) {
                    {
                        int mark(0);
                        (void) mark;  // dummy to suppress unused var warning
                        int marku(0);
                        (void) marku;  // dummy to suppress unused var warning
                        int markb(0);
                        (void) markb;  // dummy to suppress unused var warning
                        current_statement_begin__ = 1153;
                        stan::math::assign(mark, sum(stan::model::rvalue(y_has_intercept, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept")));
                        current_statement_begin__ = 1154;
                        stan::math::assign(marku, sum(stan::model::rvalue(y_has_intercept_unbound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_unbound")));
                        current_statement_begin__ = 1155;
                        stan::math::assign(markb, sum(stan::model::rvalue(y_has_intercept_bound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_bound")));
                        current_statement_begin__ = 1156;
                        if (as_bool(logical_eq(get_base1(y_has_intercept,m,"y_has_intercept",1),1))) {
                            current_statement_begin__ = 1157;
                            if (as_bool(logical_eq(get_base1(y_has_intercept_unbound,m,"y_has_intercept_unbound",1),1))) {
                                current_statement_begin__ = 1158;
                                if (as_bool(logical_eq(priorLong_dist_for_intercept,1))) {
                                    current_statement_begin__ = 1159;
                                    lp_accum__.add(normal_log<propto__>(get_base1(y_gamma_unbound,marku,"y_gamma_unbound",1), get_base1(priorLong_mean_for_intercept,mark,"priorLong_mean_for_intercept",1), get_base1(priorLong_scale_for_intercept,mark,"priorLong_scale_for_intercept",1)));
                                } else if (as_bool(logical_eq(priorLong_dist_for_intercept,2))) {
                                    current_statement_begin__ = 1162;
                                    lp_accum__.add(student_t_log<propto__>(get_base1(y_gamma_unbound,marku,"y_gamma_unbound",1), get_base1(priorLong_df_for_intercept,mark,"priorLong_df_for_intercept",1), get_base1(priorLong_mean_for_intercept,mark,"priorLong_mean_for_intercept",1), get_base1(priorLong_scale_for_intercept,mark,"priorLong_scale_for_intercept",1)));
                                }
                            } else {
                                current_statement_begin__ = 1168;
                                if (as_bool(logical_eq(priorLong_dist_for_intercept,1))) {
                                    current_statement_begin__ = 1169;
                                    lp_accum__.add(normal_log<propto__>(get_base1(y_gamma_bound,markb,"y_gamma_bound",1), get_base1(priorLong_mean_for_intercept,mark,"priorLong_mean_for_intercept",1), get_base1(priorLong_scale_for_intercept,mark,"priorLong_scale_for_intercept",1)));
                                } else if (as_bool(logical_eq(priorLong_dist_for_intercept,2))) {
                                    current_statement_begin__ = 1172;
                                    lp_accum__.add(student_t_log<propto__>(get_base1(y_gamma_bound,markb,"y_gamma_bound",1), get_base1(priorLong_df_for_intercept,mark,"priorLong_df_for_intercept",1), get_base1(priorLong_mean_for_intercept,mark,"priorLong_mean_for_intercept",1), get_base1(priorLong_scale_for_intercept,mark,"priorLong_scale_for_intercept",1)));
                                }
                            }
                        }
                    }
                }
                current_statement_begin__ = 1181;
                if (as_bool(logical_eq(priorEvent_dist,1))) {
                    current_statement_begin__ = 1181;
                    lp_accum__.add(normal_log<propto__>(e_z_beta, 0, 1));
                } else if (as_bool(logical_eq(priorEvent_dist,2))) {
                    current_statement_begin__ = 1183;
                    if (as_bool(e_t_all_124)) {
                        current_statement_begin__ = 1183;
                        lp_accum__.add(normal_log<propto__>(e_z_beta, 0, 1));
                    } else if (as_bool(e_t_any_124)) {
                        current_statement_begin__ = 1184;
                        for (int k = 1; k <= e_K; ++k) {
                            current_statement_begin__ = 1185;
                            if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),1)) || primitive_value(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),2)))) || primitive_value(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),4))))) {
                                current_statement_begin__ = 1186;
                                lp_accum__.add(normal_log<propto__>(get_base1(e_z_beta,k,"e_z_beta",1), 0, 1));
                            } else {
                                current_statement_begin__ = 1187;
                                lp_accum__.add(student_t_log<propto__>(get_base1(e_z_beta,k,"e_z_beta",1), get_base1(priorEvent_df,k,"priorEvent_df",1), 0, 1));
                            }
                        }
                    } else {
                        current_statement_begin__ = 1189;
                        lp_accum__.add(student_t_log<propto__>(e_z_beta, priorEvent_df, 0, 1));
                    }
                } else if (as_bool(logical_eq(priorEvent_dist,3))) {
                    current_statement_begin__ = 1192;
                    lp_accum__.add(normal_log<propto__>(e_z_beta, 0, 1));
                    current_statement_begin__ = 1193;
                    lp_accum__.add(normal_log<propto__>(get_base1(e_local,1,"e_local",1), 0, 1));
                    current_statement_begin__ = 1194;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(e_local,2,"e_local",1), multiply(0.5,priorEvent_df), multiply(0.5,priorEvent_df)));
                    current_statement_begin__ = 1195;
                    lp_accum__.add(normal_log<propto__>(get_base1(e_global,1,"e_global",1), 0, 1));
                    current_statement_begin__ = 1196;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(e_global,2,"e_global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(priorEvent_dist,4))) {
                    current_statement_begin__ = 1199;
                    lp_accum__.add(normal_log<propto__>(e_z_beta, 0, 1));
                    current_statement_begin__ = 1200;
                    lp_accum__.add(normal_log<propto__>(get_base1(e_local,1,"e_local",1), 0, 1));
                    current_statement_begin__ = 1201;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(e_local,2,"e_local",1), multiply(0.5,priorEvent_df), multiply(0.5,priorEvent_df)));
                    current_statement_begin__ = 1202;
                    lp_accum__.add(normal_log<propto__>(get_base1(e_local,3,"e_local",1), 0, 1));
                    current_statement_begin__ = 1204;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(e_local,4,"e_local",1), multiply(0.5,priorEvent_scale), multiply(0.5,priorEvent_scale)));
                    current_statement_begin__ = 1205;
                    lp_accum__.add(normal_log<propto__>(get_base1(e_global,1,"e_global",1), 0, 1));
                    current_statement_begin__ = 1206;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(e_global,2,"e_global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 1211;
                if (as_bool(logical_eq(e_has_intercept,1))) {
                    current_statement_begin__ = 1212;
                    if (as_bool(logical_eq(priorEvent_dist_for_intercept,1))) {
                        current_statement_begin__ = 1213;
                        lp_accum__.add(normal_log<propto__>(e_gamma, priorEvent_mean_for_intercept, priorEvent_scale_for_intercept));
                    } else if (as_bool(logical_eq(priorEvent_dist_for_intercept,2))) {
                        current_statement_begin__ = 1215;
                        lp_accum__.add(student_t_log<propto__>(e_gamma, priorEvent_df_for_intercept, priorEvent_mean_for_intercept, priorEvent_scale_for_intercept));
                    }
                }
                current_statement_begin__ = 1221;
                if (as_bool(logical_eq(priorAssoc_dist,1))) {
                    current_statement_begin__ = 1221;
                    lp_accum__.add(normal_log<propto__>(a_z_beta, 0, 1));
                } else if (as_bool(logical_eq(priorAssoc_dist,2))) {
                    current_statement_begin__ = 1223;
                    if (as_bool(a_t_all_124)) {
                        current_statement_begin__ = 1223;
                        lp_accum__.add(normal_log<propto__>(a_z_beta, 0, 1));
                    } else if (as_bool(a_t_any_124)) {
                        current_statement_begin__ = 1224;
                        for (int k = 1; k <= a_K; ++k) {
                            current_statement_begin__ = 1225;
                            if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),1)) || primitive_value(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),2)))) || primitive_value(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),4))))) {
                                current_statement_begin__ = 1226;
                                lp_accum__.add(normal_log<propto__>(get_base1(a_z_beta,k,"a_z_beta",1), 0, 1));
                            } else {
                                current_statement_begin__ = 1227;
                                lp_accum__.add(student_t_log<propto__>(get_base1(a_z_beta,k,"a_z_beta",1), get_base1(priorAssoc_df,k,"priorAssoc_df",1), 0, 1));
                            }
                        }
                    } else {
                        current_statement_begin__ = 1229;
                        lp_accum__.add(student_t_log<propto__>(a_z_beta, priorAssoc_df, 0, 1));
                    }
                } else if (as_bool(logical_eq(priorAssoc_dist,3))) {
                    current_statement_begin__ = 1232;
                    lp_accum__.add(normal_log<propto__>(a_z_beta, 0, 1));
                    current_statement_begin__ = 1233;
                    lp_accum__.add(normal_log<propto__>(get_base1(a_local,1,"a_local",1), 0, 1));
                    current_statement_begin__ = 1234;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(a_local,2,"a_local",1), multiply(0.5,priorAssoc_df), multiply(0.5,priorAssoc_df)));
                    current_statement_begin__ = 1235;
                    lp_accum__.add(normal_log<propto__>(get_base1(a_global,1,"a_global",1), 0, 1));
                    current_statement_begin__ = 1236;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(a_global,2,"a_global",1), 0.5, 0.5));
                } else if (as_bool(logical_eq(priorAssoc_dist,4))) {
                    current_statement_begin__ = 1239;
                    lp_accum__.add(normal_log<propto__>(a_z_beta, 0, 1));
                    current_statement_begin__ = 1240;
                    lp_accum__.add(normal_log<propto__>(get_base1(a_local,1,"a_local",1), 0, 1));
                    current_statement_begin__ = 1241;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(a_local,2,"a_local",1), multiply(0.5,priorAssoc_df), multiply(0.5,priorAssoc_df)));
                    current_statement_begin__ = 1242;
                    lp_accum__.add(normal_log<propto__>(get_base1(a_local,3,"a_local",1), 0, 1));
                    current_statement_begin__ = 1244;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(a_local,4,"a_local",1), multiply(0.5,priorAssoc_scale), multiply(0.5,priorAssoc_scale)));
                    current_statement_begin__ = 1245;
                    lp_accum__.add(normal_log<propto__>(get_base1(a_global,1,"a_global",1), 0, 1));
                    current_statement_begin__ = 1246;
                    lp_accum__.add(inv_gamma_log<propto__>(get_base1(a_global,2,"a_global",1), 0.5, 0.5));
                }
                current_statement_begin__ = 1251;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 1252;
                    if (as_bool(logical_gt(get_base1(priorLong_scale_for_dispersion,m,"priorLong_scale_for_dispersion",1),0))) {
                        current_statement_begin__ = 1252;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(y_dispersion_unscaled,m,"y_dispersion_unscaled",1), 0, 1));
                    }
                }
                current_statement_begin__ = 1255;
                if (as_bool(logical_eq(basehaz_weibull,1))) {
                    current_statement_begin__ = 1256;
                    lp_accum__.add(cauchy_log<propto__>(weibull_shape_unscaled, 0, 1));
                }
                current_statement_begin__ = 1259;
                if (as_bool(logical_gt(t,0))) {
                    current_statement_begin__ = 1259;
                    decov_lp(z_b,z_T,rho,zeta,tau,regularization,delta,shape,t,p, lp__, lp_accum__, pstream__);
                }
                current_statement_begin__ = 1260;
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y_gamma_unbound");
        names__.push_back("y_gamma_bound");
        names__.push_back("y_z_beta");
        names__.push_back("y_dispersion_unscaled");
        names__.push_back("e_gamma");
        names__.push_back("e_z_beta");
        names__.push_back("weibull_shape_unscaled");
        names__.push_back("a_z_beta");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau");
        names__.push_back("y_global");
        names__.push_back("y_local");
        names__.push_back("e_global");
        names__.push_back("e_local");
        names__.push_back("a_global");
        names__.push_back("a_local");
        names__.push_back("y_beta");
        names__.push_back("y_dispersion");
        names__.push_back("e_beta");
        names__.push_back("weibull_shape");
        names__.push_back("y_eta_q");
        names__.push_back("ysep_eta_q");
        names__.push_back("e_eta_q");
        names__.push_back("ll_haz_q");
        names__.push_back("ll_haz_eventtime");
        names__.push_back("ll_haz_quadtime");
        names__.push_back("ll_surv_eventtime");
        names__.push_back("sum_ll_haz_eventtime");
        names__.push_back("sum_ll_surv_eventtime");
        names__.push_back("ll_event");
        names__.push_back("a_beta");
        names__.push_back("theta_L");
        names__.push_back("b");
        names__.push_back("b_by_model");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(sum_y_has_intercept_unbound);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum_y_has_intercept_bound);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum_y_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_has_intercept);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_weibull);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_b);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(y_hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(y_hs);
        dims__.push_back((logical_gt(y_hs,0) * sum_y_K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_hs);
        dims__.push_back((logical_gt(e_hs,0) * e_K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_hs);
        dims__.push_back((logical_gt(a_hs,0) * a_K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum_y_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(e_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(basehaz_weibull);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((M * nrow_y_Xq));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(nrow_y_Xq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nrow_e_Xq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nrow_e_Xq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Npat);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Npat_times_quadnodes);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Npat_times_quadnodes);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(a_K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_b);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_b);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_jm_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<double> y_gamma_unbound;
        size_t dim_y_gamma_unbound_0__ = sum_y_has_intercept_unbound;
        for (size_t k_0__ = 0; k_0__ < dim_y_gamma_unbound_0__; ++k_0__) {
            y_gamma_unbound.push_back(in__.scalar_constrain());
        }
        vector<double> y_gamma_bound;
        size_t dim_y_gamma_bound_0__ = sum_y_has_intercept_bound;
        for (size_t k_0__ = 0; k_0__ < dim_y_gamma_bound_0__; ++k_0__) {
            y_gamma_bound.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d y_z_beta = in__.vector_constrain(sum_y_K);
        vector_d y_dispersion_unscaled = in__.vector_lb_constrain(0,M);
        vector<double> e_gamma;
        size_t dim_e_gamma_0__ = e_has_intercept;
        for (size_t k_0__ = 0; k_0__ < dim_e_gamma_0__; ++k_0__) {
            e_gamma.push_back(in__.scalar_constrain());
        }
        vector_d e_z_beta = in__.vector_constrain(e_K);
        vector<double> weibull_shape_unscaled;
        size_t dim_weibull_shape_unscaled_0__ = basehaz_weibull;
        for (size_t k_0__ = 0; k_0__ < dim_weibull_shape_unscaled_0__; ++k_0__) {
            weibull_shape_unscaled.push_back(in__.scalar_lb_constrain(0));
        }
        vector_d a_z_beta = in__.vector_constrain(a_K);
        vector_d z_b = in__.vector_constrain(len_b);
        vector_d z_T = in__.vector_constrain(len_z_T);
        vector_d rho = in__.vector_lub_constrain(0,1,len_rho);
        vector_d zeta = in__.vector_lb_constrain(0,len_concentration);
        vector_d tau = in__.vector_lb_constrain(0,t);
        vector<double> y_global;
        size_t dim_y_global_0__ = y_hs;
        for (size_t k_0__ = 0; k_0__ < dim_y_global_0__; ++k_0__) {
            y_global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> y_local;
        size_t dim_y_local_0__ = y_hs;
        for (size_t k_0__ = 0; k_0__ < dim_y_local_0__; ++k_0__) {
            y_local.push_back(in__.vector_lb_constrain(0,(logical_gt(y_hs,0) * sum_y_K)));
        }
        vector<double> e_global;
        size_t dim_e_global_0__ = e_hs;
        for (size_t k_0__ = 0; k_0__ < dim_e_global_0__; ++k_0__) {
            e_global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> e_local;
        size_t dim_e_local_0__ = e_hs;
        for (size_t k_0__ = 0; k_0__ < dim_e_local_0__; ++k_0__) {
            e_local.push_back(in__.vector_lb_constrain(0,(logical_gt(e_hs,0) * e_K)));
        }
        vector<double> a_global;
        size_t dim_a_global_0__ = a_hs;
        for (size_t k_0__ = 0; k_0__ < dim_a_global_0__; ++k_0__) {
            a_global.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> a_local;
        size_t dim_a_local_0__ = a_hs;
        for (size_t k_0__ = 0; k_0__ < dim_a_local_0__; ++k_0__) {
            a_local.push_back(in__.vector_lb_constrain(0,(logical_gt(a_hs,0) * a_K)));
        }
        for (int k_0__ = 0; k_0__ < sum_y_has_intercept_unbound; ++k_0__) {
            vars__.push_back(y_gamma_unbound[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < sum_y_has_intercept_bound; ++k_0__) {
            vars__.push_back(y_gamma_bound[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < sum_y_K; ++k_0__) {
            vars__.push_back(y_z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(y_dispersion_unscaled[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < e_has_intercept; ++k_0__) {
            vars__.push_back(e_gamma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < e_K; ++k_0__) {
            vars__.push_back(e_z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < basehaz_weibull; ++k_0__) {
            vars__.push_back(weibull_shape_unscaled[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < a_K; ++k_0__) {
            vars__.push_back(a_z_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_b; ++k_0__) {
            vars__.push_back(z_b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_z_T; ++k_0__) {
            vars__.push_back(z_T[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_rho; ++k_0__) {
            vars__.push_back(rho[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_concentration; ++k_0__) {
            vars__.push_back(zeta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < t; ++k_0__) {
            vars__.push_back(tau[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < y_hs; ++k_0__) {
            vars__.push_back(y_global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < (logical_gt(y_hs,0) * sum_y_K); ++k_1__) {
            for (int k_0__ = 0; k_0__ < y_hs; ++k_0__) {
                vars__.push_back(y_local[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < e_hs; ++k_0__) {
            vars__.push_back(e_global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < (logical_gt(e_hs,0) * e_K); ++k_1__) {
            for (int k_0__ = 0; k_0__ < e_hs; ++k_0__) {
                vars__.push_back(e_local[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < a_hs; ++k_0__) {
            vars__.push_back(a_global[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < (logical_gt(a_hs,0) * a_K); ++k_1__) {
            for (int k_0__ = 0; k_0__ < a_hs; ++k_0__) {
                vars__.push_back(a_local[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d y_beta(static_cast<Eigen::VectorXd::Index>(sum_y_K));
        (void) y_beta;  // dummy to suppress unused var warning
        vector_d y_dispersion(static_cast<Eigen::VectorXd::Index>(M));
        (void) y_dispersion;  // dummy to suppress unused var warning
        vector_d e_beta(static_cast<Eigen::VectorXd::Index>(e_K));
        (void) e_beta;  // dummy to suppress unused var warning
        vector<double> weibull_shape(basehaz_weibull, 0.0);
        vector_d y_eta_q(static_cast<Eigen::VectorXd::Index>((M * nrow_y_Xq)));
        (void) y_eta_q;  // dummy to suppress unused var warning
        vector<vector_d> ysep_eta_q(M, (vector_d(static_cast<Eigen::VectorXd::Index>(nrow_y_Xq))));
        vector_d e_eta_q(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        (void) e_eta_q;  // dummy to suppress unused var warning
        vector_d ll_haz_q(static_cast<Eigen::VectorXd::Index>(nrow_e_Xq));
        (void) ll_haz_q;  // dummy to suppress unused var warning
        vector_d ll_haz_eventtime(static_cast<Eigen::VectorXd::Index>(Npat));
        (void) ll_haz_eventtime;  // dummy to suppress unused var warning
        vector_d ll_haz_quadtime(static_cast<Eigen::VectorXd::Index>(Npat_times_quadnodes));
        (void) ll_haz_quadtime;  // dummy to suppress unused var warning
        vector_d ll_surv_eventtime(static_cast<Eigen::VectorXd::Index>(Npat_times_quadnodes));
        (void) ll_surv_eventtime;  // dummy to suppress unused var warning
        double sum_ll_haz_eventtime(0.0);
        (void) sum_ll_haz_eventtime;  // dummy to suppress unused var warning
        double sum_ll_surv_eventtime(0.0);
        (void) sum_ll_surv_eventtime;  // dummy to suppress unused var warning
        double ll_event(0.0);
        (void) ll_event;  // dummy to suppress unused var warning
        vector_d a_beta(static_cast<Eigen::VectorXd::Index>(a_K));
        (void) a_beta;  // dummy to suppress unused var warning
        vector_d theta_L(static_cast<Eigen::VectorXd::Index>(len_theta_L));
        (void) theta_L;  // dummy to suppress unused var warning
        vector_d b(static_cast<Eigen::VectorXd::Index>(len_b));
        (void) b;  // dummy to suppress unused var warning
        vector_d b_by_model(static_cast<Eigen::VectorXd::Index>(len_b));
        (void) b_by_model;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 860;
            if (as_bool(logical_eq(priorLong_dist,0))) {
                current_statement_begin__ = 860;
                stan::math::assign(y_beta, y_z_beta);
            } else if (as_bool(logical_eq(priorLong_dist,1))) {
                current_statement_begin__ = 861;
                stan::math::assign(y_beta, add(elt_multiply(y_z_beta,priorLong_scale),priorLong_mean));
            } else if (as_bool(logical_eq(priorLong_dist,2))) {
                current_statement_begin__ = 862;
                for (int k = 1; k <= sum_y_K; ++k) {
                    {
                        double P(0.0);
                        (void) P;  // dummy to suppress unused var warning
                        stan::math::initialize(P, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 864;
                        if (as_bool(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),1))) {
                            current_statement_begin__ = 865;
                            stan::math::assign(P, Phi(get_base1(y_z_beta,k,"y_z_beta",1)));
                            current_statement_begin__ = 866;
                            stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), tan((pi() * (P - 0.5))));
                        } else if (as_bool(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),2))) {
                            current_statement_begin__ = 869;
                            stan::math::assign(P, Phi(get_base1(y_z_beta,k,"y_z_beta",1)));
                            current_statement_begin__ = 870;
                            stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), ((2 * (P - 0.5)) / sqrt(((2.0 * P) * (1 - P)))));
                        } else if (as_bool(logical_eq(get_base1(priorLong_df,k,"priorLong_df",1),4))) {
                            {
                                double q_a(0.0);
                                (void) q_a;  // dummy to suppress unused var warning
                                stan::math::initialize(q_a, std::numeric_limits<double>::quiet_NaN());
                                current_statement_begin__ = 874;
                                stan::math::assign(P, Phi(get_base1(y_z_beta,k,"y_z_beta",1)));
                                current_statement_begin__ = 875;
                                stan::math::assign(q_a, sqrt(((4.0 * P) * (1 - P))));
                                current_statement_begin__ = 876;
                                stan::math::assign(q_a, (cos((acos(q_a) / 3)) / q_a));
                                current_statement_begin__ = 877;
                                stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), (2 * sqrt((q_a - 1))));
                                current_statement_begin__ = 878;
                                if (as_bool(logical_lt(P,0.5))) {
                                    current_statement_begin__ = 878;
                                    stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), -(get_base1(y_beta,k,"y_beta",1)));
                                }
                            }
                        } else {
                            current_statement_begin__ = 880;
                            stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), get_base1(y_z_beta,k,"y_z_beta",1));
                        }
                        current_statement_begin__ = 881;
                        stan::math::assign(get_base1_lhs(y_beta,k,"y_beta",1), ((get_base1(y_beta,k,"y_beta",1) * get_base1(priorLong_scale,k,"priorLong_scale",1)) + get_base1(priorLong_mean,k,"priorLong_mean",1)));
                    }
                }
            } else if (as_bool(logical_eq(priorLong_dist,3))) {
                current_statement_begin__ = 883;
                stan::math::assign(y_beta, hs_prior(y_z_beta,y_global,y_local, pstream__));
            } else if (as_bool(logical_eq(priorLong_dist,4))) {
                current_statement_begin__ = 884;
                stan::math::assign(y_beta, hsplus_prior(y_z_beta,y_global,y_local, pstream__));
            }
            current_statement_begin__ = 886;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 887;
                if (as_bool(logical_gt(get_base1(priorLong_scale_for_dispersion,m,"priorLong_scale_for_dispersion",1),0))) {
                    current_statement_begin__ = 888;
                    stan::math::assign(get_base1_lhs(y_dispersion,m,"y_dispersion",1), (get_base1(priorLong_scale_for_dispersion,m,"priorLong_scale_for_dispersion",1) * get_base1(y_dispersion_unscaled,m,"y_dispersion_unscaled",1)));
                } else {
                    current_statement_begin__ = 889;
                    stan::math::assign(get_base1_lhs(y_dispersion,m,"y_dispersion",1), get_base1(y_dispersion_unscaled,m,"y_dispersion_unscaled",1));
                }
            }
            current_statement_begin__ = 893;
            if (as_bool(logical_eq(priorEvent_dist,0))) {
                current_statement_begin__ = 893;
                stan::math::assign(e_beta, e_z_beta);
            } else if (as_bool(logical_eq(priorEvent_dist,1))) {
                current_statement_begin__ = 894;
                stan::math::assign(e_beta, add(elt_multiply(e_z_beta,priorEvent_scale),priorEvent_mean));
            } else if (as_bool(logical_eq(priorEvent_dist,2))) {
                current_statement_begin__ = 895;
                for (int k = 1; k <= e_K; ++k) {
                    {
                        double P(0.0);
                        (void) P;  // dummy to suppress unused var warning
                        stan::math::initialize(P, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 897;
                        if (as_bool(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),1))) {
                            current_statement_begin__ = 898;
                            stan::math::assign(P, Phi(get_base1(e_z_beta,k,"e_z_beta",1)));
                            current_statement_begin__ = 899;
                            stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), tan((pi() * (P - 0.5))));
                        } else if (as_bool(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),2))) {
                            current_statement_begin__ = 902;
                            stan::math::assign(P, Phi(get_base1(e_z_beta,k,"e_z_beta",1)));
                            current_statement_begin__ = 903;
                            stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), ((2 * (P - 0.5)) / sqrt(((2.0 * P) * (1 - P)))));
                        } else if (as_bool(logical_eq(get_base1(priorEvent_df,k,"priorEvent_df",1),4))) {
                            {
                                double q_a(0.0);
                                (void) q_a;  // dummy to suppress unused var warning
                                stan::math::initialize(q_a, std::numeric_limits<double>::quiet_NaN());
                                current_statement_begin__ = 907;
                                stan::math::assign(P, Phi(get_base1(e_z_beta,k,"e_z_beta",1)));
                                current_statement_begin__ = 908;
                                stan::math::assign(q_a, sqrt(((4.0 * P) * (1 - P))));
                                current_statement_begin__ = 909;
                                stan::math::assign(q_a, (cos((acos(q_a) / 3)) / q_a));
                                current_statement_begin__ = 910;
                                stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), (2 * sqrt((q_a - 1))));
                                current_statement_begin__ = 911;
                                if (as_bool(logical_lt(P,0.5))) {
                                    current_statement_begin__ = 911;
                                    stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), -(get_base1(e_beta,k,"e_beta",1)));
                                }
                            }
                        } else {
                            current_statement_begin__ = 913;
                            stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), get_base1(e_z_beta,k,"e_z_beta",1));
                        }
                        current_statement_begin__ = 914;
                        stan::math::assign(get_base1_lhs(e_beta,k,"e_beta",1), ((get_base1(e_beta,k,"e_beta",1) * get_base1(priorEvent_scale,k,"priorEvent_scale",1)) + get_base1(priorEvent_mean,k,"priorEvent_mean",1)));
                    }
                }
            } else if (as_bool(logical_eq(priorEvent_dist,3))) {
                current_statement_begin__ = 916;
                stan::math::assign(e_beta, hs_prior(e_z_beta,e_global,e_local, pstream__));
            } else if (as_bool(logical_eq(priorEvent_dist,4))) {
                current_statement_begin__ = 917;
                stan::math::assign(e_beta, hsplus_prior(e_z_beta,e_global,e_local, pstream__));
            }
            current_statement_begin__ = 919;
            if (as_bool(logical_gt(priorEvent_scale_for_weibull,0))) {
                current_statement_begin__ = 920;
                stan::math::assign(get_base1_lhs(weibull_shape,1,"weibull_shape",1), (priorEvent_scale_for_weibull * get_base1(weibull_shape_unscaled,1,"weibull_shape_unscaled",1)));
            } else {
                current_statement_begin__ = 921;
                stan::math::assign(weibull_shape, weibull_shape_unscaled);
            }
            current_statement_begin__ = 924;
            if (as_bool(logical_eq(priorAssoc_dist,0))) {
                current_statement_begin__ = 924;
                stan::math::assign(a_beta, a_z_beta);
            } else if (as_bool(logical_eq(priorAssoc_dist,1))) {
                current_statement_begin__ = 925;
                stan::math::assign(a_beta, add(elt_multiply(a_z_beta,priorAssoc_scale),priorAssoc_mean));
            } else if (as_bool(logical_eq(priorAssoc_dist,2))) {
                current_statement_begin__ = 926;
                for (int k = 1; k <= a_K; ++k) {
                    {
                        double P(0.0);
                        (void) P;  // dummy to suppress unused var warning
                        stan::math::initialize(P, std::numeric_limits<double>::quiet_NaN());
                        current_statement_begin__ = 928;
                        if (as_bool(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),1))) {
                            current_statement_begin__ = 929;
                            stan::math::assign(P, Phi(get_base1(a_z_beta,k,"a_z_beta",1)));
                            current_statement_begin__ = 930;
                            stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), tan((pi() * (P - 0.5))));
                        } else if (as_bool(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),2))) {
                            current_statement_begin__ = 933;
                            stan::math::assign(P, Phi(get_base1(a_z_beta,k,"a_z_beta",1)));
                            current_statement_begin__ = 934;
                            stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), ((2 * (P - 0.5)) / sqrt(((2.0 * P) * (1 - P)))));
                        } else if (as_bool(logical_eq(get_base1(priorAssoc_df,k,"priorAssoc_df",1),4))) {
                            {
                                double q_a(0.0);
                                (void) q_a;  // dummy to suppress unused var warning
                                stan::math::initialize(q_a, std::numeric_limits<double>::quiet_NaN());
                                current_statement_begin__ = 938;
                                stan::math::assign(P, Phi(get_base1(a_z_beta,k,"a_z_beta",1)));
                                current_statement_begin__ = 939;
                                stan::math::assign(q_a, sqrt(((4.0 * P) * (1 - P))));
                                current_statement_begin__ = 940;
                                stan::math::assign(q_a, (cos((acos(q_a) / 3)) / q_a));
                                current_statement_begin__ = 941;
                                stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), (2 * sqrt((q_a - 1))));
                                current_statement_begin__ = 942;
                                if (as_bool(logical_lt(P,0.5))) {
                                    current_statement_begin__ = 942;
                                    stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), -(get_base1(a_beta,k,"a_beta",1)));
                                }
                            }
                        } else {
                            current_statement_begin__ = 944;
                            stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), get_base1(a_z_beta,k,"a_z_beta",1));
                        }
                        current_statement_begin__ = 945;
                        stan::math::assign(get_base1_lhs(a_beta,k,"a_beta",1), ((get_base1(a_beta,k,"a_beta",1) * get_base1(priorAssoc_scale,k,"priorAssoc_scale",1)) + get_base1(priorAssoc_mean,k,"priorAssoc_mean",1)));
                    }
                }
            } else if (as_bool(logical_eq(priorAssoc_dist,3))) {
                current_statement_begin__ = 947;
                stan::math::assign(a_beta, hs_prior(a_z_beta,a_global,a_local, pstream__));
            } else if (as_bool(logical_eq(priorAssoc_dist,4))) {
                current_statement_begin__ = 948;
                stan::math::assign(a_beta, hsplus_prior(a_z_beta,a_global,a_local, pstream__));
            }
            current_statement_begin__ = 951;
            if (as_bool(logical_gt(t,0))) {
                current_statement_begin__ = 953;
                stan::math::assign(theta_L, make_theta_L(len_theta_L,p,tau,scale,zeta,rho,z_T, pstream__));
                current_statement_begin__ = 954;
                stan::math::assign(b, make_b(z_b,theta_L,p,l, pstream__));
                current_statement_begin__ = 955;
                if (as_bool(logical_gt(M,1))) {
                    current_statement_begin__ = 955;
                    stan::math::assign(b_by_model, reorder_b(b,p,q,l,M, pstream__));
                } else {
                    current_statement_begin__ = 956;
                    stan::math::assign(b_by_model, b);
                }
            }
            current_statement_begin__ = 964;
            if (as_bool(logical_gt(sum_y_K,0))) {
                current_statement_begin__ = 964;
                stan::math::assign(y_eta_q, multiply(y_Xq,y_beta));
            } else {
                current_statement_begin__ = 965;
                stan::math::assign(y_eta_q, rep_vector(0.0,(M * nrow_y_Xq)));
            }
            current_statement_begin__ = 967;
            stan::math::assign(y_eta_q, add(y_eta_q,csr_matrix_times_vector((M * nrow_y_Xq),len_b,w_Zq,v_Zq,u_Zq,b_by_model)));
            current_statement_begin__ = 968;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 969;
                stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), segment(y_eta_q,(((m - 1) * nrow_y_Xq) + 1),nrow_y_Xq));
                current_statement_begin__ = 970;
                if (as_bool(logical_eq(get_base1(y_has_intercept,m,"y_has_intercept",1),1))) {
                    current_statement_begin__ = 971;
                    if (as_bool(logical_eq(get_base1(y_has_intercept_unbound,m,"y_has_intercept_unbound",1),1))) {
                        current_statement_begin__ = 972;
                        stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), add(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(y_gamma_unbound,sum(stan::model::rvalue(y_has_intercept_unbound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_unbound")),"y_gamma_unbound",1)));
                    } else {
                        current_statement_begin__ = 975;
                        stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), add(subtract(get_base1(ysep_eta_q,m,"ysep_eta_q",1),min(get_base1(ysep_eta_q,m,"ysep_eta_q",1))),get_base1(y_gamma_bound,sum(stan::model::rvalue(y_has_intercept_bound, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_has_intercept_bound")),"y_gamma_bound",1)));
                    }
                } else if (as_bool(logical_eq(y_centre,1))) {
                    {
                        int mark_beg(0);
                        (void) mark_beg;  // dummy to suppress unused var warning
                        int mark_end(0);
                        (void) mark_end;  // dummy to suppress unused var warning
                        current_statement_begin__ = 981;
                        if (as_bool(logical_eq(m,1))) {
                            current_statement_begin__ = 981;
                            stan::math::assign(mark_beg, 1);
                        } else {
                            current_statement_begin__ = 982;
                            stan::math::assign(mark_beg, (sum(stan::model::rvalue(y_K, stan::model::cons_list(stan::model::index_min_max(1, (m - 1)), stan::model::nil_index_list()), "y_K")) + 1));
                        }
                        current_statement_begin__ = 983;
                        stan::math::assign(mark_end, sum(stan::model::rvalue(y_K, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::nil_index_list()), "y_K")));
                        current_statement_begin__ = 985;
                        stan::math::assign(get_base1_lhs(ysep_eta_q,m,"ysep_eta_q",1), add(get_base1(ysep_eta_q,m,"ysep_eta_q",1),dot_product(stan::model::rvalue(y_xbar, stan::model::cons_list(stan::model::index_min_max(mark_beg, mark_end), stan::model::nil_index_list()), "y_xbar"),stan::model::rvalue(y_beta, stan::model::cons_list(stan::model::index_min_max(mark_beg, mark_end), stan::model::nil_index_list()), "y_beta"))));
                    }
                }
            }
            current_statement_begin__ = 991;
            if (as_bool(logical_gt(e_K,0))) {
                current_statement_begin__ = 991;
                stan::math::assign(e_eta_q, multiply(e_Xq,e_beta));
            } else {
                current_statement_begin__ = 992;
                stan::math::assign(e_eta_q, rep_vector(0.0,nrow_e_Xq));
            }
            current_statement_begin__ = 993;
            if (as_bool(logical_eq(e_has_intercept,1))) {
                current_statement_begin__ = 994;
                stan::math::assign(e_eta_q, add(e_eta_q,get_base1(e_gamma,1,"e_gamma",1)));
            } else if (as_bool(logical_eq(e_centre,1))) {
                current_statement_begin__ = 998;
                stan::math::assign(e_eta_q, add(e_eta_q,dot_product(e_xbar,e_beta)));
            }
            current_statement_begin__ = 1000;
            if (as_bool(logical_eq(assoc,1))) {
                {
                    int mark(0);
                    (void) mark;  // dummy to suppress unused var warning
                    current_statement_begin__ = 1002;
                    stan::math::assign(mark, 0);
                    current_statement_begin__ = 1003;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 1004;
                        if (as_bool(logical_eq(get_base1(has_assoc_ev,m,"has_assoc_ev",1),1))) {
                            current_statement_begin__ = 1005;
                            stan::math::assign(mark, (mark + 1));
                            current_statement_begin__ = 1006;
                            stan::math::assign(e_eta_q, add(e_eta_q,multiply(get_base1(a_beta,mark,"a_beta",1),get_base1(ysep_eta_q,m,"ysep_eta_q",1))));
                        }
                        current_statement_begin__ = 1008;
                        if (as_bool(logical_eq(get_base1(has_assoc_es,m,"has_assoc_es",1),1))) {
                            current_statement_begin__ = 1009;
                            stan::math::assign(mark, (mark + 1));
                        }
                        current_statement_begin__ = 1013;
                        if (as_bool(logical_eq(get_base1(has_assoc_cv,m,"has_assoc_cv",1),1))) {
                            {
                                vector_d y_q(static_cast<Eigen::VectorXd::Index>(nrow_y_Xq));
                                (void) y_q;  // dummy to suppress unused var warning
                                stan::math::initialize(y_q, std::numeric_limits<double>::quiet_NaN());
                                current_statement_begin__ = 1015;
                                stan::math::assign(mark, (mark + 1));
                                current_statement_begin__ = 1016;
                                if (as_bool(logical_eq(get_base1(family,m,"family",1),1))) {
                                    current_statement_begin__ = 1017;
                                    stan::math::assign(y_q, linkinv_gauss(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(link,m,"link",1), pstream__));
                                } else if (as_bool(logical_eq(get_base1(family,m,"family",1),2))) {
                                    current_statement_begin__ = 1019;
                                    stan::math::assign(y_q, linkinv_gamma(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(link,m,"link",1), pstream__));
                                } else if (as_bool(logical_eq(get_base1(family,m,"family",1),3))) {
                                    current_statement_begin__ = 1021;
                                    stan::math::assign(y_q, linkinv_inv_gaussian(get_base1(ysep_eta_q,m,"ysep_eta_q",1),get_base1(link,m,"link",1), pstream__));
                                }
                                current_statement_begin__ = 1022;
                                stan::math::assign(e_eta_q, add(e_eta_q,multiply(get_base1(a_beta,mark,"a_beta",1),y_q)));
                            }
                        }
                        current_statement_begin__ = 1024;
                        if (as_bool(logical_eq(get_base1(has_assoc_cs,m,"has_assoc_cs",1),1))) {
                            current_statement_begin__ = 1025;
                            stan::math::assign(mark, (mark + 1));
                        }
                    }
                }
            }
            current_statement_begin__ = 1043;
            stan::math::assign(ll_haz_q, elt_multiply(e_d,add(add(log(get_base1(weibull_shape,1,"weibull_shape",1)),multiply((get_base1(weibull_shape,1,"weibull_shape",1) - 1),e_log_times)),e_eta_q)));
            current_statement_begin__ = 1046;
            stan::math::assign(ll_haz_eventtime, segment(ll_haz_q,1,Npat));
            current_statement_begin__ = 1047;
            stan::math::assign(ll_haz_quadtime, segment(ll_haz_q,(Npat + 1),Npat_times_quadnodes));
            current_statement_begin__ = 1051;
            stan::math::assign(ll_surv_eventtime, elt_multiply(quadweight_times_half_eventtime,exp(ll_haz_quadtime)));
            current_statement_begin__ = 1054;
            stan::math::assign(sum_ll_haz_eventtime, sum(ll_haz_eventtime));
            current_statement_begin__ = 1055;
            stan::math::assign(sum_ll_surv_eventtime, sum(ll_surv_eventtime));
            current_statement_begin__ = 1056;
            stan::math::assign(ll_event, (sum_ll_haz_eventtime - sum_ll_surv_eventtime));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < sum_y_K; ++k_0__) {
            vars__.push_back(y_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(y_dispersion[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < e_K; ++k_0__) {
            vars__.push_back(e_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < basehaz_weibull; ++k_0__) {
            vars__.push_back(weibull_shape[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < (M * nrow_y_Xq); ++k_0__) {
            vars__.push_back(y_eta_q[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < nrow_y_Xq; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(ysep_eta_q[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < nrow_e_Xq; ++k_0__) {
            vars__.push_back(e_eta_q[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < nrow_e_Xq; ++k_0__) {
            vars__.push_back(ll_haz_q[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Npat; ++k_0__) {
            vars__.push_back(ll_haz_eventtime[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Npat_times_quadnodes; ++k_0__) {
            vars__.push_back(ll_haz_quadtime[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Npat_times_quadnodes; ++k_0__) {
            vars__.push_back(ll_surv_eventtime[k_0__]);
        }
        vars__.push_back(sum_ll_haz_eventtime);
        vars__.push_back(sum_ll_surv_eventtime);
        vars__.push_back(ll_event);
        for (int k_0__ = 0; k_0__ < a_K; ++k_0__) {
            vars__.push_back(a_beta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_theta_L; ++k_0__) {
            vars__.push_back(theta_L[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_b; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < len_b; ++k_0__) {
            vars__.push_back(b_by_model[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_jm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= sum_y_has_intercept_unbound; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_gamma_unbound" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum_y_has_intercept_bound; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_gamma_bound" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum_y_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_dispersion_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_weibull; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "weibull_shape_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= y_hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(y_hs,0) * sum_y_K); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= y_hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= e_hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs,0) * e_K); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= a_hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs,0) * a_K); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= sum_y_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_dispersion" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_weibull; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "weibull_shape" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (M * nrow_y_Xq); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_eta_q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nrow_y_Xq; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ysep_eta_q" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nrow_e_Xq; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_eta_q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nrow_e_Xq; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_haz_q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Npat; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_haz_eventtime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Npat_times_quadnodes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_haz_quadtime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Npat_times_quadnodes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_surv_eventtime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_ll_haz_eventtime";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_ll_surv_eventtime";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ll_event";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= a_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_by_model" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= sum_y_has_intercept_unbound; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_gamma_unbound" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum_y_has_intercept_bound; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_gamma_bound" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum_y_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_dispersion_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_has_intercept; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_weibull; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "weibull_shape_unscaled" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= a_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_z_T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_rho; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_concentration; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= t; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= y_hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(y_hs,0) * sum_y_K); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= y_hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= e_hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(e_hs,0) * e_K); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= e_hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e_local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= a_hs; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_global" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (logical_gt(a_hs,0) * a_K); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= a_hs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a_local" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= sum_y_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_dispersion" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= e_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= basehaz_weibull; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "weibull_shape" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (M * nrow_y_Xq); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_eta_q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nrow_y_Xq; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ysep_eta_q" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nrow_e_Xq; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "e_eta_q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nrow_e_Xq; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_haz_q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Npat; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_haz_eventtime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Npat_times_quadnodes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_haz_quadtime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Npat_times_quadnodes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_surv_eventtime" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_ll_haz_eventtime";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_ll_surv_eventtime";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ll_event";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= a_K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_theta_L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_b; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_by_model" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace




#endif
