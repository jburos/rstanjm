% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinystan.R
\name{shinystan}
\alias{launch_shinystan}
\alias{shinystan}
\title{Using the ShinyStan GUI with rstanjm models}
\description{
The ShinyStan interface provides visual and numerical summaries
  of model parameters and convergence diagnostics.
}
\details{
The \code{\link[shinystan]{launch_shinystan}} function will accept a
  \code{\link[=stanjm-object]{stanjm}} object as input.
}
\section{Faster launch times}{

For some \pkg{rstanjm} models ShinyStan may take a very long time to launch.
If this is the case with one of your models you may be able to speed up
\code{launch_shinystan} in one of several ways:
\describe{
  \item{Prevent ShinyStan from preparing graphical posterior predictive
  checks:}{
  When used with a \code{\link[=stanjm-object]{stanjm}} object 
  (\pkg{rstanjm} model object) ShinyStan will draw from the posterior 
  predictive distribution and prepare graphical posterior predictive checks 
  before launching. That way when you go to the PPcheck page the plots are 
  immediately available. This can be time consuming for models fit to very
  large datasets and you can prevent this behavior by creating a shinystan
  object before calling \code{launch_shinystan}. To do this use 
  \code{\link[shinystan]{as.shinystan}} with optional argument \code{ppd} set
  to \code{FALSE} (see the Examples section below). When you then launch
  ShinyStan and go to the PPcheck page the plots will no longer be 
  automatically generated and you will be presented with the standard
  interface requiring you to first specify the appropriate \eqn{y} and
  \eqn{yrep}, which can be done for many but not all \pkg{rstanarm} models.
  }
  \item{Use a shinystan object:}{
  Even if you don't want to prevent ShinyStan from preparing graphical
  posterior predictive checks, first creating a shinystan object using
  \code{\link[shinystan]{as.shinystan}} can reduce \emph{future} launch
  times. That is, \code{launch_shinystan(sso)} will be faster than
  \code{launch_shinystan(fit)}, where \code{sso} is a shinystan object and
  \code{fit} is a stanreg object. It still may take some time for 
  \code{as.shinystan} to create \code{sso} initially, but each time you
  subsequently call \code{launch_shinystan(sso)} it will reuse \code{sso}
  instead of internally creating a shinystan object every time. See the
  Examples section below.}
}
}
\examples{
\dontrun{
if (!exists("examplejm")) example(examplejm) 

# Launch the ShinyStan app without saving the resulting shinystan object
if (interactive()) launch_shinystan(examplejm)

# Launch the ShinyStan app (saving resulting shinystan object as sso)
if (interactive()) sso <- launch_shinystan(examplejm)

# First create shinystan object then call launch_shinystan
sso <- shinystan::as.shinystan(examplejm)
if (interactive()) launch_shinystan(sso)

# Prevent ShinyStan from preparing graphical posterior predictive checks that
# can be time consuming. examplejm is small enough that it won't matter
# much here but in general this can help speed up launch_shinystan
sso <- shinystan::as.shinystan(examplejm, ppd = FALSE)
if (interactive()) launch_shinystan(sso)
}


}

